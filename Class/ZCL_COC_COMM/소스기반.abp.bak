CLASS ZCL_COC_COMM DEFINITION
  PUBLIC
  CREATE PUBLIC .

PUBLIC SECTION.

	TYPES: TY_CFIELDS TYPE TKKV_ICOPA.
	TYPES: 
		TY_CFIELDS_T TYPE TABLE OF TY_CFIELDS.
  TYPES:
    BEGIN OF TY_PERIOD,
        GJAHR TYPE V_COSP_VIEW-GJAHR,
        PERIO TYPE COEP-PERIO,
      END OF TY_PERIOD .
  TYPES:
    TY_PERIOD_T TYPE TABLE OF TY_PERIOD .
  TYPES:
    BEGIN OF TY_BP_JOB_STEP_S,
             JOBNAME    TYPE BTCJOB,
             CPROG      TYPE CPROG,
             T_RSPARAMS TYPE TY_RSPARAMS,
           END OF TY_BP_JOB_STEP_S .
  TYPES:
    TY_BP_JOB_STEP_T TYPE TABLE OF TY_BP_JOB_STEP_S .
  TYPES:
    BEGIN OF TY_FORMULA_S,
        FIELD TYPE FIELDNAME,
        VALUE TYPE F,
      END OF TY_FORMULA_S .
  TYPES:
    TY_FORMULA_T TYPE TABLE OF TY_FORMULA_S .
  TYPES:
    BEGIN OF TY_HEADINFO_S,
        ICON TYPE ICON_D,
        SEQ  TYPE I,
        PARA TYPE SDYDO_TEXT_ELEMENT,
        VALU TYPE SDYDO_TEXT_ELEMENT,
        TEXT TYPE TEXTPOOLTX,
      END OF TY_HEADINFO_S .
  TYPES:
    TY_HEADINFO_T TYPE TABLE OF TY_HEADINFO_S .
  TYPES:
    TY_RSEL_INFO TYPE TABLE OF RSEL_INFO .
  TYPES:
    TY_TABLE     TYPE TABLE OF W3TEXT .
  TYPES:
    TY_DATA      TYPE TABLE OF CHAR4000 .
  TYPES:
    TY_PRCTR     TYPE RANGE OF PRCTR .

	CLASS-DATA MV_PERCENT TYPE INT4.
	
  CLASS-METHODS GET_CHARACTERISTIC_TEXT
    IMPORTING
      !IV_CHARACTERISTIC TYPE RKE_CHARACTERISTIC
      !IV_VALUE 				 TYPE RKE_COND_VALUE
    RETURNING
      VALUE(RV_TEXT)     TYPE RKE_TEXTLG.
  CLASS-METHODS BACKGROUND_JOB_PROCESS
    IMPORTING
      !IV_CPROG TYPE CPROG DEFAULT SY-CPROG
      !IT_RSPARAMS TYPE TY_RSPARAMS OPTIONAL
    CHANGING
      VALUE(CV_JOBNAME) TYPE BTCJOB OPTIONAL
    RETURNING
      VALUE(RV_SUBRC) TYPE SY-SUBRC .
  CLASS-METHODS BACKGROUND_JOB_PROCESS_STEP
    IMPORTING
      VALUE(IT_BPJOB_LIST) TYPE TY_BP_JOB_STEP_T OPTIONAL
    RETURNING
      VALUE(RV_SUBRC) TYPE SY-SUBRC .
  CLASS-METHODS CALC_FORMULA
    IMPORTING
      !IV_FORMULA TYPE QEIFFORMEL
      VALUE(IT_DATA) TYPE TY_FORMULA_T OPTIONAL
    CHANGING
      !CV_SUBRC TYPE SY-SUBRC OPTIONAL
    RETURNING
      VALUE(EV_RESULT) TYPE F .
  CLASS-METHODS CALL_TRANSACTION
    IMPORTING
      !IV_TCODE TYPE TCODE
      VALUE(IV_NEW_SESSION) TYPE CHAR01 DEFAULT 'X'
      !IV_MODE TYPE CHAR01 DEFAULT 'N'
      !IV_UPDATE TYPE CHAR01 DEFAULT 'A'
      !IS_CTU_PARAMS TYPE CTU_PARAMS OPTIONAL
      !IT_BDCDATA TYPE TAB_BDCDATA OPTIONAL
      !IT_PARAMETER_IDS TYPE TAB_BDCDATA OPTIONAL
    RETURNING
      VALUE(RT_BDCMESSAGES) TYPE TAB_BDCMSGCOLL .
  CLASS-METHODS CALL_TRANSACTION2
    IMPORTING
      !IV_TCODE TYPE TCODE.
  CLASS-METHODS CLEAR_SELECTION_SCREEN
    IMPORTING
      !IV_CPROG TYPE SY-CPROG
      !IV_KIND TYPE RSSCR_KIND OPTIONAL .
  CLASS-METHODS CONVERSION_EXIT_VALUE
    IMPORTING
      !IV_INPUT TYPE ANY
      !IV_CONVEXIT TYPE CONVEXIT OPTIONAL
      !IV_CONVERT_TYPE TYPE CHAR01 DEFAULT 'I'
      !IV_DBFIELD TYPE ROLLNAME OPTIONAL
    EXPORTING
      !EV_OUTPUT TYPE ANY .
  CLASS-METHODS CONVERT_CELL_TO_TABLE
    IMPORTING
      !IT_CELLS TYPE YPJO_XXL_DW_T
      !IT_DFIES TYPE DDFIELDS
    EXPORTING
      !EV_CONV_ROW TYPE I
    CHANGING
      !CT_CONV_TABLE TYPE STANDARD TABLE
    RETURNING
      VALUE(CT_RETURN) TYPE BAPIRET2_T .
  CLASS-METHODS CONVERT_DECIMALS_FOR_CURRENCY
    IMPORTING
      !IT_DFIES TYPE DDFIELDS
    CHANGING
      !CS_ITEM TYPE ANY .
  CLASS-METHODS CONVERT_STR_TO_LINE
    IMPORTING
      !IS_STR TYPE ANY
      !IT_DDFIELDS TYPE DDFIELDS
    CHANGING
      !CS_ROW_DATA TYPE USMD_CHARLINE .
  CLASS-METHODS CONV_ITAB_TO_DATA
    IMPORTING
      !IT_ITAB TYPE STANDARD TABLE
      !IV_WITH TYPE STRING OPTIONAL
    RETURNING
      VALUE(RV_VALUE) TYPE STRING .
  CLASS-METHODS CORRECT_FORMAT_CONVERSION
    IMPORTING
      VALUE(IV_SOURCE) TYPE TEXT4096
      VALUE(IS_DESC) TYPE DFIES
    EXPORTING
      !EV_TARGET TYPE ANY
    RETURNING
      VALUE(RS_RETURN) TYPE BAPIRET2 .
  CLASS-METHODS CREATE_TOP_OF_PAGE
    IMPORTING
      !IO_PARENTS TYPE REF TO CL_GUI_CONTAINER
      !IO_DOCU TYPE REF TO CL_DD_DOCUMENT
      !IV_REPID TYPE REPID DEFAULT SY-CPROG
      !IT_EXCLU TYPE MGV_LAMA_RSLDBSELOP_TT OPTIONAL
      !IT_INCLU TYPE TY_HEADINFO_T OPTIONAL
    CHANGING
      !CO_SPLITTER TYPE REF TO CL_GUI_SPLITTER_CONTAINER
    RETURNING
      VALUE(RV_SUBRC) TYPE SUBRC .
  CLASS-METHODS CURRENCY_CONV_TO_EXTERNAL
    IMPORTING
      !IV_CURR TYPE WAERS
      !IV_AMT_INT TYPE ANY
    EXPORTING
      VALUE(EV_AMT_EXT) TYPE ANY
    RETURNING
      VALUE(RV_AMT_EXT) TYPE BAPICURR_D.
  CLASS-METHODS CURRENCY_CONV_TO_INTERNAL
    IMPORTING
      !IV_CURR TYPE WAERS
      !IV_AMT_EXT TYPE ANY
    EXPORTING
      VALUE(EV_AMT_INT) TYPE ANY
    RETURNING
      VALUE(RV_AMT_INT) TYPE BAPICURR_D.
  CLASS-METHODS CURRENCY_CONV_TO_TEXT
    IMPORTING
      !IV_CURR TYPE WAERS
      !IV_WITH_COMMA TYPE CHAR1 DEFAULT ' '
      !IV_AMT_INT TYPE ANY
    RETURNING
      VALUE(RV_AMT_EXT) TYPE CHAR20.
  CLASS-METHODS DATA_COUNT_MESSAGE
    IMPORTING
      !IT_TABLE TYPE STANDARD TABLE
    EXPORTING
      !EV_COUNT TYPE I.
  CLASS-METHODS DEL_IF_ITEM
    IMPORTING
      !IV_ZIFID TYPE ZCOIFID. "CHAR10 I/F ID 
  CLASS-METHODS DYNAMIC_SQL
    IMPORTING
      !IV_SOURCE_TAB TYPE STRING
      VALUE(IV_SQL_FIELDS) TYPE STRING
      VALUE(IV_SQL_COND) TYPE STRING OPTIONAL
      VALUE(IV_SQL_GROUPBY) TYPE STRING OPTIONAL
      VALUE(IV_SQL_HAVING) TYPE STRING OPTIONAL
    EXPORTING
      !ET_DATA TYPE STANDARD TABLE
    RETURNING
      VALUE(RV_SUBRC) TYPE SY-SUBRC .
  CLASS-METHODS FILE_SAVE_DIALOG
    IMPORTING
      !IV_FILENAME TYPE STRING
      VALUE(IV_FILE_FILTER) TYPE STRING OPTIONAL
      !IV_INITIAL_DIRECTORY TYPE STRING OPTIONAL
    RETURNING
      VALUE(RV_FULLPATH) TYPE STRING .
  CLASS-METHODS GET_AVACP_TEXT
    IMPORTING
      !IV_AVACP TYPE ZCOAVACP "CHAR1 통제기간"
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_AVACP_T) TYPE CHAR20.
  CLASS-METHODS GET_AVAC_PRIOD_INFO
    IMPORTING
      !I_KOKRS TYPE KOKRS
      !I_MONAT TYPE MONAT
      !I_SAKNR TYPE SAKNR
    EXPORTING
      !E_AVACT TYPE ZCOAVACT "X 통제여부"
      !E_AVACP TYPE ZCOAVACP "CHAR1 통제기간"
      !E_AVAPR TYPE ZCOAVAPR "ZCOAVAPR 해당 통제기간"1Y/1H/2H/1Q/2Q/3Q/4Q/1M.../12M
      !E_MONFR TYPE MONAT
      !E_MONTO TYPE MONAT.
  CLASS-METHODS GET_AWTYP_TEXT
    IMPORTING
      !IV_AWTYP TYPE AWTYP
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_AWTYPT) TYPE TEXT_TYP.
  CLASS-METHODS GET_BKLAS_TEXT
    IMPORTING
      !IV_BKLAS TYPE BKLAS
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_BKLAST) TYPE BKBEZ.
  CLASS-METHODS GET_BNAME_TEXT
    IMPORTING
      !IV_BNAME TYPE XUBNAME
    RETURNING
    	VALUE(RV_BNAMET) TYPE CHAR20.
  CLASS-METHODS GET_BUKRS_FROM_KOKRS
    IMPORTING
      !IV_KOKRS TYPE KOKRS
    RETURNING
      VALUE(RV_BUKRS) TYPE BUKRS .
  CLASS-METHODS GET_BUKRS_TEXT
    IMPORTING
      !I_BUKRS TYPE BUKRS
    RETURNING
      VALUE(E_BTEXT) TYPE BUTXT .
  CLASS-METHODS GET_BWART_TEXT
    IMPORTING
      !IV_BWART TYPE BWART
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_BWARTT) TYPE BWTXT.
  CLASS-METHODS GET_CHNNL_TEXT
    IMPORTING
      !IV_CHNNL TYPE ZCOCHNNL "CHAR02 유통경로"
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_CHNNL_T) TYPE CHAR20.
  CLASS-METHODS GET_CHNNL_TEXT2
    IMPORTING
      !IV_CHNNL TYPE ZCOCHNNL "CHAR02 유통경로"
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_CHNNL_T) TYPE CHAR20.
  CLASS-METHODS GET_CURTP_TEXT
    IMPORTING
      !I_CURTP TYPE FINS_CURTYPE
    RETURNING
      VALUE(E_NAME) TYPE FINS_CURTYPET .
  CLASS-METHODS GET_DOMAIN_TEXT
    IMPORTING
      !I_DOMNAME TYPE DD07L-DOMNAME
      !I_DOMVALUE TYPE ANY
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(E_DDTEXT) TYPE DDTEXT .
  CLASS-METHODS GET_DSTTY_TEXT
    IMPORTING
      !IV_DSTTY TYPE ZCODSTTY "CHAR02 유통구분"
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
    	VALUE(RV_DSTTY_T) TYPE CHAR20.
  CLASS-METHODS GET_DYNP_VALUE
    IMPORTING
      !I_FIELD TYPE DYNPREAD-FIELDNAME
      !I_REPID TYPE SYST-REPI2 DEFAULT SY-CPROG
      !I_DYNNR TYPE SYST-DYNNR DEFAULT SY-DYNNR
    RETURNING
      VALUE(E_VALUE) TYPE DYNPREAD-FIELDVALUE .
  CLASS-METHODS GET_ELEHK_TEXT
    IMPORTING
      !I_ELEHK TYPE CK_ELESMHK
    RETURNING
      VALUE(E_TXT) TYPE CK_TXSCH .
  CLASS-METHODS GET_ERKRS_TEXT
    IMPORTING
      !I_ERKRS TYPE ERKRS
    RETURNING
      VALUE(E_TEXT) TYPE ERKRS_BZ .
  CLASS-METHODS GET_FUNC_AREA
    IMPORTING
      !IV_KOSAR TYPE KOSAR OPTIONAL
    RETURNING
      VALUE(RV_FKBER) TYPE FKBER .
  CLASS-METHODS GET_HIERARCHY_GROUP_CODE
    IMPORTING
      !IV_KOKRS TYPE KOKRS OPTIONAL
      !IV_SETCLASS TYPE SETCLASS
      !IV_GROUP_CODE TYPE ANY
    RETURNING
      VALUE(RV_SETID) TYPE SETID .
  CLASS-METHODS GET_HIERARCHY_GROUP_LIST
    IMPORTING
      !IV_KOKRS TYPE KOKRS OPTIONAL
      !IV_SETCLASS TYPE SETCLASS OPTIONAL
      !IV_SETID TYPE SETID OPTIONAL
      !IV_GROUP_CODE TYPE ANY OPTIONAL
    EXPORTING
      !ET_RANGE TYPE STANDARD TABLE
      !ET_NODES TYPE GSETH_NODE_TAB
      !ET_VALUES TYPE GSETH_VAL_TAB
    RETURNING
      VALUE(RT_RANGEVALUE) TYPE DRF_T_SELOPT .
  CLASS-METHODS GET_IF_INFO
    IMPORTING
      !IV_ZIFID TYPE ZCOIFID "CHAR10 I/F ID"
    RETURNING
      VALUE(RS_IF_INFO) TYPE ZCOCT005 . "I/F 로그관리 테이블"
  CLASS-METHODS GET_INCREMENTAL_TIMESTAMP
    CHANGING
      !C_TIMESTAMP TYPE TIMESTAMP.
  CLASS-METHODS GET_KOKRS_TEXT
    IMPORTING
      !I_KOKRS TYPE KOKRS
    RETURNING
      VALUE(E_KTEXT) TYPE BEZEI .
  CLASS-METHODS GET_KOSTL_TEXT
    IMPORTING
      !IV_KOKRS TYPE KOKRS
      !IV_KOSTL TYPE KOSTL
      !IV_DATBI TYPE DATS DEFAULT '99991231'
      !IV_SPRAS TYPE SPRAS DEFAULT '3'
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_KOSTLT) TYPE KLTXT .
  CLASS-METHODS GET_KSGRU_TEXT
    IMPORTING
      !I_KOKRS TYPE KOKRS
      !I_KSGRU TYPE RKSB1-KSGRU
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(E_DESCRIPT) TYPE SETTEXT .
  CLASS-METHODS GET_LAST_DATS
    IMPORTING
      !IV_DATE TYPE ANY
    RETURNING
      VALUE(RV_DATE) TYPE DATS .
  CLASS-METHODS GET_MATKL_TEXT
    IMPORTING
      !IV_MATKL TYPE MATKL
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_WGBEZ) TYPE WGBEZ .
  CLASS-METHODS GET_MATNR_TEXT
    IMPORTING
      !IV_MATNR TYPE MATNR
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_MAKTX) TYPE MAKTX .
  CLASS-METHODS GET_MATNR_TEXT2
    IMPORTING
      !IV_GJAHR TYPE GJAHR
      !IV_MATNR TYPE MATNR
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_MAKTX) TYPE MAKTX .
  CLASS-METHODS GET_MATNR_TEXT3
    IMPORTING
      !IV_MATNR TYPE MATNR
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_MAKTX) TYPE MAKTX .
  CLASS-METHODS GET_MONTH_COUNT
    IMPORTING
      !IV_SPMON_FR TYPE SPMON
      !IV_SPMON_TO TYPE SPMON
    RETURNING
      VALUE(RV_COUNT) TYPE I .
  CLASS-METHODS GET_MON_TEXT
    IMPORTING
      !IV_MON TYPE FCMNR
    RETURNING
      VALUE(RV_TXT) TYPE FCLTX.
  CLASS-METHODS GET_NEXT_NUMBER
    IMPORTING
      !IV_OBJECT TYPE NROBJ
      !IV_NR_RANGE_NR TYPE NRNR
      !IV_BUKRS TYPE BUKRS OPTIONAL
      !IV_GJAHR TYPE NRYEAR OPTIONAL
    RETURNING
      VALUE(RV_NUMBER) TYPE CHAR10.
  CLASS-METHODS GET_NEXT_YYYYMM
    IMPORTING
      !IV_SPMON TYPE SPMON
    RETURNING
      VALUE(RV_SPMON) TYPE SPMON.
  CLASS-METHODS GET_PGM_PARAMETER
    IMPORTING
      VALUE(IV_REPID) TYPE REPID DEFAULT SY-CPROG
    EXPORTING
      !ET_SELTAB TYPE TY_RSPARAMS
      !ET_SELINFO TYPE TY_RSEL_INFO
      !ET_SELTEXT TYPE FC00_T_SEL_SCREEN_TEXTPOOL
    RETURNING
      VALUE(RV_SUBRC) TYPE SUBRC .
  CLASS-METHODS GET_PLAN_ACC
    IMPORTING
      !IV_KOKRS TYPE KOKRS
    RETURNING
      VALUE(RT_SAKNR) TYPE FKKID_TAB_HKONT_RNG.
  CLASS-METHODS GET_PLAN_VERSN
    IMPORTING
      !IV_KOKRS TYPE KOKRS
      !IV_GJAHR TYPE GJAHR
      !IV_CLASS TYPE ZECLASS DEFAULT 'A04' "CHAR5 코드 클래스"
    RETURNING
      VALUE(RV_VERSN) TYPE VERSN.
  CLASS-METHODS GET_PRCTR_TEXT
    IMPORTING
      !I_KOKRS TYPE KOKRS
      !I_PRCTR TYPE PRCTR
    RETURNING
      VALUE(E_KTEXT) TYPE KTEXT .
  CLASS-METHODS GET_PRGRU_TEXT
    IMPORTING
      !I_KOKRS TYPE KOKRS
      !I_PRGRU TYPE RKSB1-PRGRU
    RETURNING
      VALUE(E_DESCRIPT) TYPE SETTEXT .
  CLASS-METHODS GET_PTYP_TEXT
    IMPORTING
      !IV_PTYP TYPE CK_PTYP_BVALT
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_PTYPT) TYPE CKML_CHAR40 .
  CLASS-METHODS GET_SAKNR_TEXT
    IMPORTING
      !IV_KTOPL TYPE KTOPL DEFAULT ZCOC_KTOPL
      !IV_SAKNR TYPE SAKNR
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_SAKNRT) TYPE TXT20_SKAT .
  CLASS-METHODS GET_SALTY_TEXT
    IMPORTING
      !IV_SALTY TYPE ZCOSALTY "CHAR1 판매형식"
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_SALTY_T) TYPE CHAR20 .
  CLASS-METHODS GET_SALTY_TEXT2
    IMPORTING
      !IV_SALTY TYPE ZCOSALTY "CHAR1 판매형식"
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(RV_SALTY_T) TYPE CHAR20 .
  CLASS-METHODS GET_STAGR_TEXT
    IMPORTING
      !I_KOKRS TYPE KOKRS
      !I_STAGR TYPE STAGR
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(R_BEZEI) TYPE LTEXT .
  CLASS-METHODS GET_TEXT_ELEMENT
    IMPORTING
      !IV_FIELD TYPE FIELDNAME
      !IV_VALUE TYPE SDYDO_TEXT_ELEMENT
    RETURNING
      VALUE(RV_TEXT) TYPE TEXTPOOLTX .
  CLASS-METHODS GET_USER_PARAM
    IMPORTING
      VALUE(IV_PARID) TYPE USER05-PARID
    RETURNING
      VALUE(RV_VALUE) TYPE XUVALUE .
  CLASS-METHODS GET_VERSN_TEXT
    IMPORTING
      !I_VERSN TYPE COVERSI
    RETURNING
      VALUE(E_VTEXT) TYPE VERSITXT .
  CLASS-METHODS GET_WERKS_TEXT
    IMPORTING
      !I_WERKS TYPE WERKS_D
    EXPORTING
      !EV_SUBRC TYPE SYSUBRC
    RETURNING
      VALUE(E_NAME1) TYPE NAME1 .
  CLASS-METHODS K_KOKRS_SET
    IMPORTING
      !I_KOKRS TYPE KOKRS OPTIONAL
      !I_POPUP TYPE ANY DEFAULT SPACE
    RETURNING
      VALUE(E_KOKRS) TYPE KOKRS .
  CLASS-METHODS MAKE_PUT_SIGN
    CHANGING
      !CV_VARI TYPE ANY OPTIONAL .
  CLASS-METHODS MAKE_TOP_OF_PAGE
    IMPORTING
      VALUE(IO_DOCU) TYPE REF TO CL_DD_DOCUMENT
      !IO_PARENTS TYPE REF TO CL_GUI_CONTAINER
      !IT_INFO TYPE TY_HEADINFO_T
    RETURNING
      VALUE(RV_SUBRC) TYPE SUBRC .
  CLASS-METHODS POPUP_ATTACH
    IMPORTING
      !IV_INSTID TYPE SRGBTBREL-INSTID_A
      !IV_TYPEID TYPE SRGBTBREL-TYPEID_A
      !IV_MODE TYPE CHAR01 DEFAULT 'D'
      !IV_COMMIT TYPE COSE_COMMIT DEFAULT 'X'.
  CLASS-METHODS POPUP_TO_CONFIRM
    IMPORTING
      !IV_TITLE TYPE STRING OPTIONAL
      !IV_QUESTION TYPE STRING
      !IV_DEFAULT_BUTTON TYPE CHAR01 DEFAULT '2'
    RETURNING
      VALUE(RV_RETURN) TYPE CHAR01 .
  CLASS-METHODS PV
    IMPORTING
      !IV_AMT_DEC TYPE DEC015
      !IV_RATE TYPE ZCOIRATE "DEC 13.10 이자율"
      !IV_EXPPR TYPE NUMC2 "약정기간"
    RETURNING
      VALUE(RV_RESULT) TYPE DEC015 .
  CLASS-METHODS SAVE_IF_HEADER
    IMPORTING
      !IV_ZIFID TYPE ZCOIFID "CHAR10 I/F ID"
      !IV_LOGTY TYPE C
      !IV_IFDAT TYPE ZCOIFDAT OPTIONAL "DATS I/F 생성일"
      !IV_INFNO TYPE ZCOIFSEQ OPTIONAL "NUMC10 I/F 순번"
      !IV_IFRLT TYPE ZCOIFRST OPTIONAL "CHAR1 I/F 결과(S,E)"
      !IV_IFMSG TYPE BAPI_MSG OPTIONAL
      !IV_IFCNT TYPE ZCOIFCNT OPTIONAL "DEC15 I/F 건수"
    EXPORTING
    	!EV_IFDAT TYPE ZCOIFDAT
    	!EV_INFNO TYPE ZCOIFSEQ.
  CLASS-METHODS SAVE_IF_ITEM
    IMPORTING
      !IV_ZIFID TYPE ZCOIFID "CHAR10 I/F ID"
      !IV_IFDAT TYPE ZCOIFDAT "DATS I/F 생성일"
      !IV_INFNO TYPE ZCOIFSEQ "NUMC10 I/F 순번"
      !IV_IFRLT TYPE ZCOIFRST OPTIONAL "CHAR1 I/F 결과(S,E)"
      !IV_IFMSG TYPE BAPI_MSG OPTIONAL
      !IV_DO_NOT_UPDATE_MESSAGE TYPE CHAR01 OPTIONAL
      !IT_DATA TYPE STANDARD TABLE.
  CLASS-METHODS SET_DYNP_VALUE
    IMPORTING
      !I_FIELD TYPE DYNPREAD-FIELDNAME
      !I_VALUE TYPE DYNPREAD-FIELDVALUE
      !I_REPID TYPE SYST-REPI2 DEFAULT SY-CPROG
      !I_DYNNR TYPE SYST-DYNNR DEFAULT SY-DYNNR .
  CLASS-METHODS SET_TIMESTAMP
    IMPORTING
      !IV_TYPE TYPE CHAR01 DEFAULT 'I'
    CHANGING
      !CS_WA TYPE ANY .
  CLASS-METHODS SHOW_BAPI_MESSAGE
    IMPORTING
      !IT_RETURN TYPE BAPIRET2_T
    RETURNING
      VALUE(RS_RETURN) TYPE BAL_S_EXCM .
  CLASS-METHODS SHOW_PROGRESS_PERCENTAGE
    IMPORTING
      !IV_TOTAL_LINES TYPE INT4 OPTIONAL
      !IV_COUNT TYPE INT4 OPTIONAL
      !IV_TEXT TYPE TEXT100 .
  CLASS-METHODS SHOW_STRING_MESSAGE
    IMPORTING
      !IV_STRING TYPE STRING
      !IV_MSGTYP TYPE SYST_MSGTY DEFAULT 'E'.
  CLASS-METHODS SIMPLE_ALV
    IMPORTING
      VALUE(IT_HDTXT) TYPE STANDARD TABLE OPTIONAL
      VALUE(IT_ITAB) TYPE STANDARD TABLES
      VALUE(IT_NOOUT) TYPE FIELDNAME_T OPTIONAL
      VALUE(IT_KFIELDS) TYPE FIELDNAME_T OPTIONAL
      VALUE(IT_AGGRFIELDS) TYPE FIELDNAME_T OPTIONAL
      VALUE(IT_SORTFIELDS) TYPE FIELDNAME_T OPTIONAL
      VALUE(IT_QFIELDS) TYPE TY_CFIELDS_T OPTIONAL
      VALUE(IT_CFIELDS) TYPE TY_CFIELDS_T OPTIONAL
      VALUE(IV_TITLE) TYPE LVC_TITLE OPTIONAL
      VALUE(IV_TOOLBAR) TYPE BOOLEAN OPTIONAL
      VALUE(IV_START_COLUMN) TYPE INT4 OPTIONAL
      VALUE(IV_END_COLUMN) TYPE INT4 OPTIONAL
      VALUE(IV_START_LINE) TYPE INT4 OPTIONAL
      VALUE(IV_END_LINE) TYPE INT4 OPTIONAL.
  CLASS-METHODS WWW_DOWNLOAD
    IMPORTING
      VALUE(IV_OBJID) TYPE W3OBJID.
  CLASS-METHODS XXL_DOWNLOAD
    IMPORTING
      VALUE(IV_FILENAME) TYPE STRING OPTIONAL
      VALUE(IV_START_LINE) TYPE INT4 DEFAULT 2
      VALUE(IV_COUNT) TYPE INT4 DEFAULT 10000
      VALUE(IS_HEADER_STR) TYPE ANY
      VALUE(IT_FDCAT) TYPE LVC_T_FCAT OPTIONAL
      VALUE(IT_DATA) TYPE STANDARD TABLE
      VALUE(IT_EXCLUDE_FIELD) TYPE FIELDNAME_T OPTIONAL .
  CLASS-METHODS XXL_DOWNLOAD2
    IMPORTING
      VALUE(IV_FILENAME) TYPE STRING OPTIONAL
      VALUE(IV_START_LINE) TYPE INT4 DEFAULT 2
      VALUE(IV_COUNT) TYPE INT4 DEFAULT 10000
      VALUE(IS_HEADER_STR) TYPE ANY
      VALUE(IT_FDCAT) TYPE LVC_T_FCAT OPTIONAL
      VALUE(IT_DATA) TYPE STANDARD TABLE
      VALUE(IT_EXCLUDE_FIELD) TYPE FIELDNAME_T OPTIONAL .
  CLASS-METHODS XXL_UPLOAD
    IMPORTING
      !IV_FILENAME TYPE STRING
      !IV_SHEETNO TYPE INT4 DEFAULT 1
      !IV_START_ROW TYPE INT4 DEFAULT 2
      !IV_SPLIT_ROW TYPE INT4 DEFAULT 10000
    EXPORTING
      !ET_TAB_CONVERTED_DATA TYPE STANDARD TABLE
    RETURNING
      VALUE(RT_RETURN) TYPE BAPIRET2_T .
  CLASS-METHODS GET_IF_PATH_FILENAME
    IMPORTING
      !IV_IF_ID TYPE CHAR02
      !IV_PARAM1 TYPE STRING OPTIONAL
      !IV_PARAM2 TYPE STRING OPTIONAL
    EXPORTING
      !EV_PATH TYPE STRING
      !EV_FILE TYPE STRING
    RETURNING
      VALUE(RV_FULLPATH) TYPE STRING .
  CLASS-METHODS MOVE_SERVER_FILE
    IMPORTING
      !IV_FROM TYPE STRING
      !IV_TO TYPE STRING
      !IV_COPY TYPE CHAR01 OPTIONAL.
  PROTECTED SECTION.
PRIVATE SECTION.

  CLASS-DATA MO_ROOT TYPE REF TO CX_ROOT .
  CLASS-DATA MV_ROWNO TYPE INT4 .
  CLASS-DATA MS_IF_INFO TYPE ZCOCT005 . "I/F 로그관리 테이블"

  CLASS-METHODS MESSAGE_HEADLING
    IMPORTING
      !IV_MSG_TEXT TYPE STRING
      !IV_MESSAGE_TYPE TYPE CHAR01 OPTIONAL
      !IV_ERR_POPUP TYPE CHAR01 OPTIONAL
    RETURNING
      VALUE(RS_MSG_RETURN) TYPE BAPIRET2 .
ENDCLASS.



CLASS ZCL_COC_COMM IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_LAST_DATS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DATE                        TYPE        ANY
* | [<-()] RV_DATE                        TYPE        DATS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_LAST_DATS.

    DATA(LV_LEN) = STRLEN( IV_DATE ).

    IF IV_DATE CN '0123456789'.
      EXIT.
    ENDIF.

    CASE LV_LEN.
      WHEN 6. "YYYYMM
        RV_DATE = CONV DATS( IV_DATE && '01' ).
      WHEN 7. "YYYYMMM
        RV_DATE = CONV DATS( IV_DATE(4) && IV_DATE+5(2) && '01' ).
      WHEN 8. "YYYYMMDD
        RV_DATE = CONV DATS( IV_DATE ).
    ENDCASE.

    CALL FUNCTION 'LAST_DAY_OF_MONTHS'
      EXPORTING
        DAY_IN            = RV_DATE
      IMPORTING
        LAST_DAY_OF_MONTH = RV_DATE
      EXCEPTIONS
        DAY_IN_NO_DATE    = 1
        OTHERS            = 2.

    IF SY-SUBRC IS NOT INITIAL.
      CLEAR RV_DATE.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_PGM_PARAMETER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_REPID                       TYPE        REPID (DEFAULT =SY-CPROG)
* | [<---] ET_SELTAB                      TYPE        TY_RSPARAMS
* | [<---] ET_SELINFO                     TYPE        TY_RSEL_INFO
* | [<---] ET_SELTEXT                     TYPE        FC00_T_SEL_SCREEN_TEXTPOOL
* | [<-()] RV_SUBRC                       TYPE        SUBRC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_PGM_PARAMETER.
*----------------------------------------------------------------------*
* DESCRIPTION      : SCREEN 1000의 화면 값을 가져온다.
* TECH. SCRIPT     : SCREEN 1000의 화면 값을 가져온다.
*----------------------------------------------------------------------*

    DATA: LS_SELTEXT TYPE TEXTPOOL,
          LT_SELTEXT LIKE TABLE OF LS_SELTEXT,
          LT_SELTAB  TYPE TABLE OF RSPARAMS,
          LT_SELINFO TYPE TABLE OF RSEL_INFO,
          LV_REPID   TYPE REPID,
          LV_INDEX   TYPE I.

    LV_REPID = IV_REPID.

    CLEAR: LT_SELINFO,
           LT_SELTEXT,
           LT_SELTAB.

    "PARAMETER LIST
    CALL FUNCTION 'RS_REPORTSELECTIONS_INFO'
      EXPORTING
        REPORT              = LV_REPID
      TABLES
        FIELD_INFO          = LT_SELINFO
      EXCEPTIONS
        NO_SELECTIONS       = 1
        REPORT_NOT_EXISTENT = 2
        SUBROUTINE_POOL     = 3
        OTHERS              = 4.
    IF SY-SUBRC <> 0.
      RV_SUBRC = SY-SUBRC.
      RETURN.
    ENDIF.

    "PARAMETER TEXT
    CALL FUNCTION 'RS_TEXTPOOL_READ'
      EXPORTING
        OBJECTNAME           = LV_REPID
        ACTION               = SPACE
      TABLES
        TPOOL                = LT_SELTEXT
      EXCEPTIONS
        OBJECT_NOT_FOUND     = 1
        PERMISSION_FAILURE   = 2
        INVALID_PROGRAM_TYPE = 3
        ERROR_OCCURED        = 4
        ACTION_CANCELLED     = 5
        OTHERS               = 6.
    IF SY-SUBRC <> 0.
      RV_SUBRC = SY-SUBRC.
      RETURN.
    ELSE.
      LOOP AT LT_SELTEXT INTO LS_SELTEXT.
        LV_INDEX = SY-TABIX.
        IF LS_SELTEXT-ID NE ZSCO0_S.
          DELETE LT_SELTEXT INDEX LV_INDEX.
          CONTINUE.
        ENDIF.

        LS_SELTEXT-ENTRY = LS_SELTEXT-ENTRY+8(247).
        MODIFY LT_SELTEXT FROM LS_SELTEXT INDEX LV_INDEX TRANSPORTING ENTRY.
      ENDLOOP.
      DELETE LT_SELTEXT WHERE ID NE ZSCO0_S.
    ENDIF.

    "PARAMETER VALUE
    CALL FUNCTION 'RS_REFRESH_FROM_SELECTOPTIONS'
      EXPORTING
        CURR_REPORT     = LV_REPID
      TABLES
        SELECTION_TABLE = LT_SELTAB
      EXCEPTIONS
        NOT_FOUND       = 1
        NO_REPORT       = 2
        OTHERS          = 3.
    IF SY-SUBRC <> 0.
      RV_SUBRC = SY-SUBRC.
      RETURN.
    ENDIF.

    ET_SELINFO = LT_SELINFO.
    ET_SELTAB  = LT_SELTAB.
    ET_SELTEXT = LT_SELTEXT.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_PRCTR_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_PRCTR                        TYPE        PRCTR
* | [<-()] E_KTEXT                        TYPE        KTEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_PRCTR_TEXT.

    CHECK I_PRCTR IS NOT INITIAL.

    SELECT SINGLE KTEXT
      INTO E_KTEXT
      FROM CEPCT
     WHERE SPRAS = SY-LANGU
       AND PRCTR = I_PRCTR
       AND DATBI >= SY-DATLO
       AND KOKRS = I_KOKRS.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_PRGRU_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_PRGRU                        TYPE        RKSB1-PRGRU
* | [<-()] E_DESCRIPT                     TYPE        SETTEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_PRGRU_TEXT.

    SELECT SINGLE DESCRIPT
      INTO E_DESCRIPT
      FROM SETHEADERT
     WHERE SETCLASS = '0106'
       AND SUBCLASS = I_KOKRS
       AND SETNAME  = I_PRGRU
       AND LANGU    = SY-LANGU.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_STAGR_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_STAGR                        TYPE        STAGR
* | [<-()] E_BEZEI                        TYPE        LTEXT
* | [<-()] E_BEZEI                        TYPE        LTEXT
* | [<-()] E_BEZEI                        TYPE        LTEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_STAGR_TEXT.

		CLEAR: EV-SUBRC, R_BEZEI.
		
    SELECT SINGLE STAGR
      FROM TKT03
     WHERE KOKRS = @I_KOKRS
       AND STAGR = @I_STAGR
      INTO @DATA(LV_STAGR).

		IF SY-SUBRC = 0.
		
    SELECT SINGLE BEZEI
      INTO E_BEZEI
      FROM TKT03
     WHERE KOKRS = @I_KOKRS
       AND STAGR = @I_STAGR
      INTO @R_BEZEI.

		ELSE.
	
			EV_SUBRC = 4.
	
		ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_TEXT_ELEMENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FIELD                       TYPE        FIELDNAME
* | [--->] IV_VALUE                       TYPE        SDYDO_TEXT_ELEMENT
* | [<-()] RV_TEXT                        TYPE        TEXTPOOLTX
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_TEXT_ELEMENT.


    DATA: LS_PTAB        TYPE ABAP_PARMBIND,
          LT_PTAB        TYPE ABAP_PARMBIND_TAB,
          LS_SEOCMPKEY   TYPE SEOCMPKEY,
          LT_PARM        TYPE SEOS_PARAMETERS_R,
          LV_METHOD_NAME TYPE TMDIR-METHODNAME,
          LV_CLS_NAME    TYPE CLASSNAME VALUE 'ZCL_COC_COMM'.

    LV_METHOD_NAME = 'GET_' && IV_FIELD && '_TEXT'.

    "CHECK METHOD EXIST
    CALL FUNCTION 'RPY_EXISTENCE_CHECK_METH'
      EXPORTING
        CLASS     = LV_CLS_NAME
        METHOD    = LV_METHOD_NAME
      EXCEPTIONS
        NOT_EXIST = 1
        OTHERS    = 2.
    IF SY-SUBRC <> 0.
      EXIT.
    ENDIF.

    "GET METHOD PARAMETER
    LS_SEOCMPKEY-CLSNAME = LV_CLS_NAME.
    LS_SEOCMPKEY-CMPNAME = LV_METHOD_NAME.

    CALL FUNCTION 'SEO_PARAMETER_READ_ALL'
      EXPORTING
        CMPKEY                 = LS_SEOCMPKEY
      IMPORTING
        PARAMETERS             = LT_PARM
      EXCEPTIONS
        COMPONENT_NOT_EXISTING = 1
        OTHERS                 = 2.
    IF SY-SUBRC <> 0.
      EXIT.
    ENDIF.

    "SET METHOD PARAMETER
    LOOP AT LT_PARM REFERENCE INTO DATA(LS_PARM).

      CHECK LS_PARM->PAROPTIONL IS INITIAL.

      LS_PTAB-NAME = LS_PARM->SCONAME.

      CASE LS_PARM->PARDECLTYP.
        WHEN 0. "IMPORTING PARAMETER
          LS_PTAB-KIND = CL_ABAP_OBJECTDESCR=>EXPORTING.

          CONCATENATE 'I_' IV_FIELD INTO DATA(LV_IMPORT).

          CASE LS_PTAB-NAME.
            WHEN 'I_LANGU' OR 'I_SPRAS'.
              LS_PTAB-VALUE = REF #( SY-LANGU ).
            WHEN LV_IMPORT.
              CREATE DATA LS_PTAB-VALUE TYPE (LS_PARM->TYPE).
              ASSIGN LS_PTAB-VALUE->* TO FIELD-SYMBOL(<LV_VALUE>).
              <LV_VALUE> = IV_VALUE.
            WHEN OTHERS.
              CLEAR LS_PTAB.
              CONTINUE.
          ENDCASE.

          INSERT LS_PTAB INTO TABLE  LT_PTAB.

        WHEN 1. "EXPORTING PARAMETER
          LS_PTAB-KIND  = CL_ABAP_OBJECTDESCR=>IMPORTING.
          LS_PTAB-VALUE = REF #( RV_TEXT ).

          INSERT LS_PTAB INTO TABLE  LT_PTAB.

        WHEN 2. "CHANGING PARAMETER

        WHEN 3. "RETURNING PARAMETER
          LS_PTAB-KIND  = CL_ABAP_OBJECTDESCR=>RETURNING.

          LS_PTAB-VALUE = REF #( RV_TEXT ).

          INSERT LS_PTAB INTO TABLE  LT_PTAB.

      ENDCASE.

      CLEAR LS_PTAB.

    ENDLOOP.

    "DYNAMIC CALL METHOD
    CHECK LT_PTAB IS NOT INITIAL.

    TRY.

        CALL METHOD (LV_CLS_NAME)=>(LV_METHOD_NAME)
          PARAMETER-TABLE LT_PTAB.

      CATCH CX_SY_DYN_CALL_ILLEGAL_TYPE INTO DATA(LO_ROOT).
        DATA(LV_MSG) = LO_ROOT->GET_TEXT( ).
        EXIT.

      CATCH CX_SY_DYN_CALL_PARAM_MISSING INTO DATA(LO_ROOT_1).
        LV_MSG = LO_ROOT_1->GET_TEXT( ).
        EXIT.

    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_USER_PARAM
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARID                       TYPE        USER05-PARID
* | [<-()] RV_VALUE                       TYPE        XUVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_USER_PARAM.

    CALL FUNCTION 'TPM_THX_USER_PARAMETER_GET'
      EXPORTING
        I_PARAM_ID    = IV_PARID
      IMPORTING
        E_PARAM_VALUE = RV_VALUE.

    IF RV_VALUE IS INITIAL.
      GET PARAMETER ID IV_PARID FIELD RV_VALUE.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_VERSN_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_VERSN                        TYPE        COVERSI
* | [<-()] E_VTEXT                        TYPE        VERSITXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_VERSN_TEXT.

    CHECK I_VERSN IS NOT INITIAL.

    SELECT SINGLE VTEXT
      INTO E_VTEXT
      FROM TKVST
     WHERE SPRAS = SY-LANGU
       AND VERSI = I_VERSN.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_WERKS_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_WERKS                        TYPE        WERKS_D
* | [<-()] E_NAME1                        TYPE        NAME1
* | [<-()] E_NAME1                        TYPE        NAME1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_WERKS_TEXT.

    CLEAR: EV_SUBRC, RV_WERKS_T.

    SELECT SINGLE NAME1
      FROM T001W
     WHERE WERKS = @IV_WERKS
      INTO @RV_WERKS_T.

		IF SY-SUBRC <> 0.
			EV_SUBRC = 4.
		ENDIF.
			
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>K_KOKRS_SET
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS (DEFAULT ='L000')
* | [<-()] E_KOKRS                        TYPE        KOKRS
* | [<-()] E_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD K_KOKRS_SET.

    	"없으면 팝업
      CALL FUNCTION 'K_KOKRS_SET'
        EXPORTING
          I_KOKRS       = I_KOKRS
          POPUP         = I_POPUP
        IMPORTING
        	E_KOKRS       = E_KOKRS
        EXCEPTIONS
          ERROR_MESSAGE = 1.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>MAKE_PUT_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CV_VARI                        TYPE        ANY(OPTIONAL)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD MAKE_PUT_SIGN.

    CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
      CHANGING
        VALUE = CV_VARI.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>MAKE_TOP_OF_PAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCU                        TYPE REF TO CL_DD_DOCUMENT
* | [--->] IO_PARENTS                     TYPE REF TO CL_GUI_CONTAINER
* | [--->] IT_INFO                        TYPE        TY_HEADINFO_T
* | [<-()] RV_SUBRC                       TYPE        SUBRC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD MAKE_TOP_OF_PAGE.

*-- CREATE HEADER BOX
    DATA: LS_INFO TYPE TY_HEADINFO_S,
          LT_INFO LIKE TABLE OF LS_INFO.

    DATA: LO_TABLE    TYPE REF TO CL_DD_TABLE_ELEMENT,
          LO_COL_PARA TYPE REF TO CL_DD_AREA,
          LO_COL_VALU TYPE REF TO CL_DD_AREA,
          LO_COL_TEXT TYPE REF TO CL_DD_AREA.

    DATA: LV_ICON TYPE ICONNAME,
          LV_1ST  TYPE W3_QVALUE,
          LV_2ST  TYPE W3_QVALUE,
          LV_3ST  TYPE W3_QVALUE,
          LV_FULL TYPE W3_QVALUE,
          LV_BLNK TYPE I.

    CONSTANTS: LC_STRO TYPE SDYDO_ATTRIBUTE VALUE 'STRONG',
               LC_0    TYPE W3_QVALUE       VALUE '0',
               LC_X    TYPE C               VALUE 'X'.

*-- CHECK INITIAL
    IF IT_INFO[] IS INITIAL.
      RV_SUBRC = 4.
      RETURN.
    ELSE.
      LT_INFO[] = IT_INFO[].
    ENDIF.

    LOOP AT LT_INFO INTO LS_INFO.
      IF LV_1ST < STRLEN( LS_INFO-PARA ).
        LV_1ST = STRLEN( LS_INFO-PARA ).
      ENDIF.
      IF LV_2ST < STRLEN( LS_INFO-VALU ).
        LV_2ST = STRLEN( LS_INFO-VALU ).
      ENDIF.
      IF LV_3ST < STRLEN( LS_INFO-TEXT ).
        LV_3ST = STRLEN( LS_INFO-TEXT ).
      ENDIF.
    ENDLOOP.

    LV_1ST = ( LV_1ST * 15 ) + 10.
    LV_2ST = ( LV_2ST * 10 ) + 10.
    LV_3ST = ( LV_3ST * 10 ) + 10.

    IF LV_1ST < 90.
      LV_1ST = 100.
    ENDIF.
    IF LV_2ST < 90.
      LV_2ST = 100.
    ENDIF.
    IF LV_3ST < 90.
      LV_3ST = 100.
    ENDIF.

    LV_FULL = LV_1ST + LV_2ST + LV_3ST + 10.

    CONDENSE: LV_1ST, LV_2ST, LV_3ST, LV_FULL.

*-- DOCUMENT OBJECT INITIALIZATION
    CALL METHOD IO_DOCU->INITIALIZE_DOCUMENT( ).

*-- MAKE HEADER
    CALL METHOD IO_DOCU->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 4
        WITH_HEADING  = SPACE
        WIDTH         = LV_FULL
        BORDER        = LC_0
      IMPORTING
        TABLE         = LO_TABLE.

*-- FRAME COLUMN 1
    CALL METHOD LO_TABLE->ADD_COLUMN
      EXPORTING
        WIDTH  = LV_1ST
      IMPORTING
        COLUMN = LO_COL_PARA.

*-- FRAME COLUMN 2
    CALL METHOD LO_TABLE->ADD_COLUMN
      EXPORTING
        WIDTH  = LV_2ST
      IMPORTING
        COLUMN = LO_COL_VALU.

*-- FRAME COLUMN 3
    CALL METHOD LO_TABLE->ADD_COLUMN
      EXPORTING
        WIDTH  = LV_3ST
      IMPORTING
        COLUMN = LO_COL_TEXT.

    LOOP AT LT_INFO INTO LS_INFO.

*-- ADD ICON
      IF LS_INFO-ICON IS NOT INITIAL.
        LV_ICON = LS_INFO-ICON.
        CALL METHOD LO_COL_PARA->ADD_ICON
          EXPORTING
            SAP_ICON = LV_ICON
            SAP_SIZE = CL_DD_AREA=>SMALL.
      ENDIF.

*-- COLUMN 1
      IF LS_INFO-PARA IS NOT INITIAL.
        IF LS_INFO-PARA(1) = SPACE.
          CALL METHOD LO_COL_PARA->ADD_GAP
            EXPORTING
              WIDTH = 1.
        ENDIF.

        CALL METHOD LO_COL_PARA->ADD_TEXT
          EXPORTING
            TEXT         = LS_INFO-PARA
            SAP_FONTSIZE = 'SMALL'
            SAP_EMPHASIS = LC_STRO.

        CALL METHOD LO_COL_PARA->NEW_LINE.

      ELSE.
        ADD 1 TO LV_BLNK.
      ENDIF.

*-- COLUMN 2
      IF LS_INFO-VALU IS NOT INITIAL.

        CALL METHOD LO_COL_VALU->ADD_TEXT
          EXPORTING
            SAP_FONTSIZE = 'SMALL'
            TEXT         = LS_INFO-VALU.

        CALL METHOD LO_COL_VALU->NEW_LINE.

      ELSE.
        ADD 1 TO LV_BLNK.
      ENDIF.

*-- COLUMN 3
      IF LS_INFO-TEXT IS NOT INITIAL.

        IF LV_BLNK = 2.
          CALL METHOD LO_TABLE->SPAN_COLUMNS
            EXPORTING
              COL_START_SPAN = LO_COL_PARA
              NO_OF_COLS     = 3.

          CALL METHOD LO_COL_PARA->ADD_TEXT
            EXPORTING
              TEXT         = LS_INFO-TEXT
              SAP_FONTSIZE = 'SMALL'
              SAP_EMPHASIS = LC_STRO.

          CALL METHOD LO_COL_PARA->NEW_LINE.

        ELSE.

          CALL METHOD LO_COL_TEXT->ADD_TEXT
            EXPORTING
              TEXT         = LS_INFO-TEXT
              SAP_FONTSIZE = 'SMALL'.

          CALL METHOD LO_COL_TEXT->NEW_LINE.

        ENDIF.
      ELSE.
        ADD 1 TO LV_BLNK.
      ENDIF.

      AT LAST.
        EXIT.
      ENDAT.

      IF LV_BLNK = 3.
        CALL METHOD LO_COL_TEXT->NEW_LINE.
      ENDIF.

      CALL METHOD LO_TABLE->NEW_ROW.

      CLEAR LV_BLNK.

    ENDLOOP.

    CALL METHOD IO_DOCU->MERGE_DOCUMENT( ).

*-- DISPLAY DOCUMENTS
    CALL METHOD IO_DOCU->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = LC_X
        REUSE_REGISTRATION = LC_X
        PARENT             = IO_PARENTS
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

    IF SY-SUBRC <> 0.
      RV_SUBRC = SY-SUBRC.
      RETURN.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PRIVATE METHOD ZCL_COC_COMM=>MESSAGE_HEADLING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_MSG_TEXT                    TYPE        STRING
* | [--->] IV_MESSAGE_TYPE                TYPE        CHAR01(OPTIONAL)
* | [--->] IV_ERR_POPUP                   TYPE        CHAR01(OPTIONAL)
* | [<-()] RS_MSG_RETURN                  TYPE        BAPIRET2
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD MESSAGE_HEADLING.

    DATA: LT_LINE  TYPE TABLE OF SYMSGV,
          LS_LINE  TYPE SYMSGV,

          LS_MSG   TYPE BAPIRET2,
          LV_MSG   TYPE STRING,
          LV_FNAME TYPE FIELDNAME,
          LV_CNT   TYPE N VALUE 1.

    FIELD-SYMBOLS <LV_VALUE> TYPE ANY.

    IF IV_MSG_TEXT IS INITIAL.
      EXIT.
    ELSE.
      LV_MSG = IV_MSG_TEXT.
    ENDIF.

*-- SPLIT LONG TEXT MESSAGE
    IF LV_MSG IS NOT INITIAL.

      SPLIT LV_MSG AT SPACE INTO TABLE LT_LINE.
      CLEAR LV_MSG.

      LOOP AT LT_LINE INTO LS_LINE.

        IF LV_MSG IS INITIAL.
          CONCATENATE LV_MSG LS_LINE INTO LV_MSG.
        ELSE.
          CONCATENATE LV_MSG LS_LINE INTO LV_MSG SEPARATED BY SPACE.
        ENDIF.


*-- ASSIGN MESSAGE VALUE FIELD
        CLEAR LV_FNAME. UNASSIGN <LV_VALUE>.
        CONCATENATE 'LS_MSG_MESSAGE_V' LV_CNT INTO LV_FNAME.
        ASSIGN (LV_FNAME) TO <LV_VALUE>.
        CHECK <LV_VALUE> IS ASSIGNED.

        CALL METHOD CL_ABAP_LIST_UTILITIES=>DYNAMIC_OUTPUT_LENGTH
          EXPORTING
            FIELD = LV_MSG
          RECEIVING
            LEN   = DATA(LV_LEN).

*-- CHECK OVER LENGTH
        IF LV_LEN >= 50.
          LV_MSG = LS_LINE.
          ADD 1 TO LV_CNT.
          CLEAR LV_FNAME. UNASSIGN <LV_VALUE>.
          CONCATENATE 'LS_MSG_MESSAGE_V' LV_CNT INTO LV_FNAME.
          ASSIGN (LV_FNAME) TO <LV_VALUE>.
        ENDIF.

*-- CONCATENATE SPLIT MESSAGE
        CHECK <LV_VALUE> IS ASSIGNED.
        IF <LV_VALUE> IS INITIAL.
          CONCATENATE <LV_VALUE> LS_LINE ' ' INTO <LV_VALUE>.
        ELSE.
          CONCATENATE <LV_VALUE> LS_LINE ' ' INTO <LV_VALUE> SEPARATED BY SPACE.
        ENDIF.

      ENDLOOP.

    ENDIF.

    IF LS_MSG IS NOT INITIAL.
      MOVE-CORRESPONDING LS_MSG TO RS_MSG_RETURN.
    ENDIF.

**-- DISPLAY MESSAGE OPTION
*    IF IV_MESSAGE_TYPE IS NOT INITIAL.
*
*      IF IV_ERR_POPUP = ABAP_TRUE.
*
*        DATA(LV_ANS) = ZCL_SCO_COMM=>POPUP_TO_CONFIRM(
*                                           IV_TITLE    = '메시지 확인'
*                                           IV_QUESTION = '메시지를 확인 하시겠습니까?' ).
*      ELSE.
*        LV_ANS = ZSCO0_Y.
*      ENDIF.
*
*      IF LV_ANS = ZSCO0_Y.
*        "메세지띄우기
*      ENDIF.
*
*    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>POPUP_TO_CONFIRM
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TITLE                       TYPE        STRING(OPTIONAL)
* | [--->] IV_QUESTION                    TYPE        STRING
* | [--->] IV_DEFAULT_BUTTON              TYPE        CHAR01 (DEFAULT ='2')
* | [<-()] RV_RETURN                      TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD POPUP_TO_CONFIRM.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR              = IV_TITLE
        TEXT_QUESTION         = IV_QUESTION
        DEFAULT_BUTTON        = IV_DEFAULT_BUTTON
        DISPLAY_CANCEL_BUTTON = SPACE
      IMPORTING
        ANSWER                = RV_RETURN
      EXCEPTIONS
        TEXT_NOT_FOUND        = 1
        OTHERS                = 2.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>SET_DYNP_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FIELD                        TYPE        DYNPREAD-FIELDNAME
* | [--->] I_VALUE                        TYPE        DYNPREAD-FIELDVALUE
* | [--->] I_REPID                        TYPE        SYST-REPI2 (DEFAULT =SY-CPROG)
* | [--->] I_DYNNR                        TYPE        SYST-DYNNR (DEFAULT =SY-DYNNR)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SET_DYNP_VALUE.

*    TRY.
*
*        CALL FUNCTION 'SET_DYNP_VALUE'
*          EXPORTING
*            I_FIELD = I_FIELD
*            I_REPID = I_REPID
*            I_DYNNR = I_DYNNR
*            I_VALUE = I_VALUE.
*
*      CATCH CX_ROOT INTO DATA(LX_ROOT).
*    ENDTRY.

    DATA: LS_DYNPREAD TYPE DYNPREAD,
          LT_DYNPREAD TYPE TABLE OF DYNPREAD.

    LT_DYNPREAD = VALUE #( ( FIELDNAME = I_FIELD FIELDVALUE = I_VALUE ) ).

    TRY.

        CALL FUNCTION 'DYNP_VALUES_UPDATE'
          EXPORTING
            DYNAME               = I_REPID
            DYNUMB               = I_DYNNR
          TABLES
            DYNPFIELDS           = LT_DYNPREAD
          EXCEPTIONS
            INVALID_ABAPWORKAREA = 1
            INVALID_DYNPROFIELD  = 2
            INVALID_DYNPRONAME   = 3
            INVALID_DYNPRONUMMER = 4
            INVALID_REQUEST      = 5
            NO_FIELDDESCRIPTION  = 6
            UNDEFIND_ERROR       = 7
            OTHERS               = 8.


      CATCH CX_ROOT INTO DATA(LX_ROOT).

        DATA(LV_ERROR_TEXT) = LX_ROOT->GET_TEXT( ).
        MESSAGE E000(0K) WITH LV_ERROR_TEXT.

    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>SET_TIMESTAMP
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        CHAR01 (DEFAULT ='I')
* | [<-->] CS_WA                          TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SET_TIMESTAMP.

    DATA LS_ZCOTS TYPE ZCOTS.

    CASE IV_TYPE.

      WHEN ZSCO0_I.

        LS_ZCOTS = VALUE ZCOTS( ERDAT = SY-DATUM
                                ERZET = SY-UZEIT
                                ERNAM = SY-UNAME
                                "AEDAT = SY-DATUM
                                "AEZET = SY-UZEIT
                                "AENAM = SY-UNAME 
                              ).

      WHEN ZSCO0_U.

        MOVE-CORRESPONDING CS_WA TO LS_ZCOTS.

        LS_ZCOTS = VALUE ZCOTS( AEDAT = SY-DATUM
                                AEZET = SY-UZEIT
                                AENAM = SY-UNAME  ).

    ENDCASE.

    MOVE-CORRESPONDING LS_ZCOTS TO CS_WA.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>SHOW_BAPI_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_RETURN                      TYPE        BAPIRET2_T
* | [<-()] RS_RETURN                      TYPE        BAL_S_EXCM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SHOW_BAPI_MESSAGE.

    DATA: LS_RETURN TYPE BAPIRET2,
          LV_TEXT   TYPE C LENGTH 10,
          LV_ZEILE  TYPE I.


    CONSTANTS LC_TEXT TYPE C LENGTH 10 VALUE 'ROW NO.'.

    CHECK IT_RETURN[] IS NOT INITIAL.

    CALL FUNCTION 'MESSAGES_INITIALIZE'
      EXCEPTIONS
        LOG_NOT_ACTIVE       = 1
        WRONG_IDENTIFICATION = 2
        OTHERS               = 3.

    LOOP AT IT_RETURN INTO LS_RETURN.
      IF LS_RETURN-ROW IS INITIAL.
        LV_ZEILE = SY-TABIX.
      ELSE.
        LV_TEXT = LC_TEXT.
        LV_ZEILE = LS_RETURN-ROW.
      ENDIF.

      IF LS_RETURN-TYPE IS INITIAL.
        LS_RETURN-TYPE = ZSCO0_S.
      ENDIF.

      IF LS_RETURN-ID IS INITIAL.
        LS_RETURN-ID = '00'.
      ENDIF.

      CALL FUNCTION 'MESSAGE_STORE'
        EXPORTING
          ARBGB                  = LS_RETURN-ID
          MSGTY                  = LS_RETURN-TYPE
          MSGV1                  = LS_RETURN-MESSAGE_V1
          MSGV2                  = LS_RETURN-MESSAGE_V2
          MSGV3                  = LS_RETURN-MESSAGE_V3
          MSGV4                  = LS_RETURN-MESSAGE_V4
          TXTNR                  = LS_RETURN-NUMBER
          ZEILE                  = LV_ZEILE
        EXCEPTIONS
          MESSAGE_TYPE_NOT_VALID = 1
          NOT_ACTIVE             = 2
          OTHERS                 = 3.

      CLEAR LS_RETURN.

    ENDLOOP.

    CALL FUNCTION 'MESSAGES_SHOW'
      EXPORTING
        SHOW_LINNO_TEXT     = LV_TEXT
        SHOW_LINNO_TEXT_LEN = 5
      IMPORTING
        E_EXIT_COMMAND      = RS_RETURN
      EXCEPTIONS
        INCONSISTENT_RANGE  = 1
        NO_MESSAGES         = 2
        OTHERS              = 3.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>SHOW_PROGRESS_PERCENTAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TOTAL_LINES                 TYPE        INT4(OPTIONAL)
* | [--->] IV_COUNT                       TYPE        INT4(OPTIONAL)
* | [--->] IV_TEXT                        TYPE        TEXT100
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SHOW_PROGRESS_PERCENTAGE.

    DATA: LV_PERCENT TYPE P DECIMALS 2,
          LV_TEXT    TYPE STRING.

    IF IV_TOTAL_LINES IS NOT INITIAL AND IV_COUNT IS NOT INITIAL.

      TRY.
          LV_PERCENT = TRUNC( ( IV_COUNT / IV_TOTAL_LINES ) * 100 ).
        CATCH CX_SY_ARITHMETIC_OVERFLOW.
          EXIT.
      ENDTRY.

      IF LV_PERCENT <> MV_PERCENT. "EXCEPT DUPLICATE MESSAGE
        MV_PERCENT = LV_PERCENT.

        DATA(LV_PERCENTT) = CONV CHAR6( LV_PERCENT ).
        CONCATENATE IV_TEXT LV_PERCENTT '%' INTO LV_TEXT.

        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            PERCENTAGE = MV_PERCENT
            TEXT       = LV_TEXT.

      ENDIF.

    ELSE.

      CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
        EXPORTING
          TEXT = LV_TEXT.

    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>SHOW_STRING_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CPROG                       TYPE        CPROG (DEFAULT =SY-CPROG)
* | [--->] IT_RSPARAMS                    TYPE        TY_RSPARAMS(OPTIONAL)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SHOW_STRING_MESSAGE.
		
		CALL FUNCTION 'BUS_MESSAGE_INIT'.
		
		CALL FUNCTION 'BUS_MESSAGE_STATUS_SET'
		  EXPORTING
		  	MSG_COLL_STATUS = '2'.
		  	
		SPLIT IV_STRING AT ZCOC_SEPERATOR INTO TABLE DATA(LT_MSG).
			
	  LOOP AT LT_MSG INTO DATA(LV_MSG).
	  	
			CALL FUNCTION 'BUS_MESSAGE_STORE'
			  EXPORTING
			  	ARBGB = '0K'
			  	MSGTY = IV_MSGTYP
			  	TXTNR = 000
			  	MSGV1 = LV_MSG.
			  	
		ENDLOOP.
		
		CALL FUNCTION 'BUS_MESSAGE_SHOW'.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>SIMPLE_ALV
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_HDTXT                       TYPE        STANDARD TABLE(OPTIONAL)
* | [--->] IT_ITAB                        TYPE        STANDARD TABLE
* | [--->] IT_NOOUT                       TYPE        FIELDNAME_T(OPTIONAL)
* | [--->] IV_TITLE                       TYPE        LVC_TITLE(OPTIONAL)
* | [--->] IV_TOOLBAR                     TYPE        BOOLEAN(OPTIONAL)
* | [--->] IV_START_COLUMN                TYPE        INT4(OPTIONAL)
* | [--->] IV_END_COLUMN                  TYPE        INT4(OPTIONAL)
* | [--->] IV_END_COLUMN                  TYPE        INT4(OPTIONAL)
* | [--->] IV_END_COLUMN                  TYPE        INT4(OPTIONAL)
* | [--->] IV_END_COLUMN                  TYPE        INT4(OPTIONAL)
* | [--->] IV_END_COLUMN                  TYPE        INT4(OPTIONAL)
* | [--->] IV_END_COLUMN                  TYPE        INT4(OPTIONAL)
* | [--->] IV_START_LINE                  TYPE        INT4(OPTIONAL)
* | [--->] IV_END_LINE                    TYPE        INT4(OPTIONAL)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SIMPLE_ALV.
*---------------------------------------------------------------------*
*IV_TITLE        : 세션창 제목 PARAMETER 값이 없을 시 메인 프로그램 제목 사용
*IV_TOOLBAR      : 기본 툴바 제공, PARAMETER값이 없을 시 확인 버튼만 존재
*IT_NOOUT        : IT_TAB 필드 중 필요 없는 필드 등록
*IT_KFIELDS      : KEY 적용 필드 추가
*IT_CFIELDS      : 통화 적용 필드 추가
*IT_QFIELDS      : 단위 적용 필드 추가
*IT_HDTXT        : ALV HEADER TEXT
*IV_START_COLUMN : 팝업 시 위치
*IV_END_COLUMN   : 팝업 시 위치
*IV_START_LINE   : 팝업 시 위치
*IV_END_LINE     : 팝업 시 위치
*---------------------------------------------------------------------*
*EX)
*SELECT *
*  FROM SFLIGHT
*  INTO TABLE @DATA(LT_SFLIGHT).
*
*DATA(LT_NO_OUT) = VALUE FIELDNAME_T( ( CONV #( |MANDT| ) )
*                                     ( CONV #( |PRICE| ) ) ).
*
*DATA(LT_HDTXT) = VALUE SPERS_XMLT( ( CONV #( |CLIENT| ) )
*                                   ( CONV #( |AIRLINE CODE| ) )
*                                   ( CONV #( |FLIGHT CONNECTION NUMBER| ) )
*                                   ( CONV #( |FLIGHT DATE| ) )
*                                   ( CONV #( |AIRFARE| ) )
*                                   ( CONV #( |LOCAL CURRENCY OF AIRLINE| ) )
*                                   ( CONV #( |AIRCRAFT TYPE| ) )
*                                   ( CONV #( |MAXIMUM CAPACITY IN ECONOMY CLASS| ) )
*                                   ( CONV #( |OCCUPIED SEATS IN ECONOMY CLASS| ) )
*                                   ( CONV #( |TOTAL OF CURRENT BOOKINGS| ) )
*                                   ( CONV #( |MAXIMUM CAPACITY IN BUSINESS CLASS| ) )
*                                   ( CONV #( |OCCUPIED SEATS IN BUSINESS CLASS| ) )
*                                   ( CONV #( |MAXIMUM CAPACITY IN FIRST CLASS| ) )
*                                   ( CONV #( |OCCUPIED SEATS IN FIRST CLASS| ) ) ).
*
*ZCL_COC_COMM=>SIMPLE_ALV( EXPORTING IV_TITLE        = 'SFLIGHT'
*                                    IV_TOOLBAR      = ABAP_ON
*                                    IT_ITAB         = LT_SFLIGHT[]
*                                    IT_NOOUT        = LT_NO_OUT
*                                    IT_HDTXT        = LT_HDTXT
*                                    IV_START_COLUMN = 10
*                                    IV_START_LINE   = 3
*                                    IV_END_COLUMN   = 120
*                                    IV_END_LINE     = 30 ) .
*---------------------------------------------------------------------*
		DATA: LO_COLUMN TYPE REF TO CL_SALV_COLUMN_TABLE.
		
    TRY.
        CL_SALV_TABLE=>FACTORY( IMPORTING R_SALV_TABLE = DATA(LR_TABLE)
                                CHANGING  T_TABLE      = IT_ITAB[] ).
      CATCH CX_SALV_MSG.
    ENDTRY.

    DATA(LR_FUNCTIONS) = LR_TABLE->GET_FUNCTIONS( ).
    DATA(LR_COLUMNS)   = LR_TABLE->GET_COLUMNS( ).
    DATA(LR_DISP_SET)  = LR_TABLE->GET_DISPLAY_SETTINGS( ).
    DATA(LR_AGGR)  = LR_TABLE->GET_AGGREGATIONS( ).
    DATA(LR_SORT)  = LR_TABLE->GET_SORTS( ).

    "FUNCTIONS
    IF IV_TOOLBAR = ABAP_ON.
      LR_FUNCTIONS->SET_ALL( ).
    ENDIF.

    "SET OPTIMIZE
    LR_COLUMNS->SET_OPTIMIZE( ABAP_TRUE ).

    "SET POPUP
    IF IV_START_COLUMN IS NOT INITIAL.
      LR_TABLE->SET_SCREEN_POPUP( START_COLUMN = IV_START_COLUMN
                                  END_COLUMN   = IV_END_COLUMN
                                  START_LINE   = IV_START_LINE
                                  END_LINE     = IV_END_LINE ) .
    ENDIF.

    "SET TITLE
    IF IV_TITLE IS NOT INITIAL.
      LR_DISP_SET->SET_LIST_HEADER( IV_TITLE ).
    ENDIF.

		"SET SORT
		LOOP AT IT_SORTFIELDS ASSIGNING FIELD-SYMBOL(<FS_SORT>).
			TRY.
				CALL METHOD LR_SORT->ADD_SORT
				  EXPORTING
				  	COLUMNNAME = CONV #( <FS_SORT> )
				  	SUBTOT     = IF_SALV_C_BOOL_SAP=>TRUE.
					CATCH CS_SALV_NOT_FOUND.
					CATCH CS_SALV_EXISTING.
					CATCH CS_SALV_DATA_ERROR.
				ENDTRY.
		ENDLOOP.
		
		"SET AGGREGATION, TOTAL
		LOOP AT IT_AGGRFIELDS ASSIGNING FIELD-SYMBOL(<FS_AGGR>).
			TRY.
				CALL METHOD LR_AGGR->ADD_AGGREGATION
				  EXPORTING
				  	COLUMNNAME  = CONV #( <FS_AGGR> )
				  	AGGREGATION = IF_SALV_C_AGGREGATION=>TOTAL.
					CATCH CS_SALV_NOT_FOUND.
					CATCH CS_SALV_EXISTING.
					CATCH CS_SALV_DATA_ERROR.
				ENDTRY.
		ENDLOOP.
		
    LOOP AT LR_COLUMNS->GET( ) INTO DATA(LS_COLUMNS).

      "SET HEADER TEXT
      IF IT_HDTXT IS NOT INITIAL.
        READ TABLE IT_HDTXT ASSIGNING FIELD-SYMBOL(<FS_HDTXT>) INDEX SY-TABIX.
        IF SY-SUBRC  = 0.
          LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME )->SET_SHORT_TEXT( CONV #( <FS_HDTXT> ) ).
          LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME )->SET_MEDIUM_TEXT( CONV #( <FS_HDTXT> ) ).
          LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME )->SET_LONG_TEXT( CONV #( <FS_HDTXT> ) ).
        ENDIF.
      ENDIF.

      "SET NO OUT FIELDS
      IF IT_NOOUT IS NOT INITIAL.
        READ TABLE IT_NOOUT ASSIGNING FIELD-SYMBOL(<FS_NOOUT>) WITH KEY TABLE_LINE = LS_COLUMNS-COLUMNNAME.
        IF SY-SUBRC = 0.
          LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME )->SET_TECHNICAL( ABAP_ON ).
        ENDIF.
      ENDIF.
      
      "KEY FIELDS
      IF IT_KFIELDS IS NOT INITIAL.
        READ TABLE IT_KFIELDS ASSIGNING FIELD-SYMBOL(<FS_KFIELDS>) WITH KEY TABLE_LINE = LS_COLUMNS-COLUMNNAME.
        IF SY-SUBRC = 0.
          LO_COLUMN ?= LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME ).
          LO_COLUMN->SET_KEY( ABAP_ON ).
        ENDIF.
      ENDIF.
      
      "CURRENCY FIELDS
      IF IT_CFIELDS IS NOT INITIAL.
        READ TABLE IT_CFIELDS ASSIGNING FIELD-SYMBOL(<FS_CFIELDS>) WITH KEY FIELDN_1 = LS_COLUMNS-COLUMNNAME.
        IF SY-SUBRC = 0.
          LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME )->SET_CURRENCY_COLUMN( <FS_CFIELDS>-FIELDN_2 .
        ENDIF.
      ENDIF.
      
      "QUANTITY FIELDS
      IF IT_QFIELDS IS NOT INITIAL.
        READ TABLE IT_QFIELDS ASSIGNING FIELD-SYMBOL(<FS_QFIELDS>) WITH KEY FIELDN_1 = LS_COLUMNS-COLUMNNAME.
        IF SY-SUBRC = 0.
          LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME )->SET_QUANTITY_COLUMN( <FS_QFIELDS>-FIELDN_2 .
        ENDIF.
      ENDIF.
      
      "ICON
      IF LS_COLUMNS-COLUMNNAME CS 'ICON'.
        LO_COLUMN ?= LR_COLUMNS->GET_COLUMN( LS_COLUMNS-COLUMNNAME ).
        LO_COLUMN->SET_ICON( ABAP_ON ).
        LO_COLUMN->SET_LONG_TEXT( 'ICON' ).
      ENDIF.
            
    ENDLOOP.

		"레이아웃 저장 제한 해제
	  DATA: LR_LAYOUT TYPE REF TO CL_SALV_LAYOUT.
	  DATA: LS_KEY TYPE SALV_S_LAYOUT_KEY.
	  LR_LAYOUT = LR_TABLE->GET_LAYOUT( )
	  LS_KEY-REPORT = SY-REPID.
	  LR_LAYOUT->SET_KEY( LS_KEY ).
	  LR_LAYOUT->SET_SAVE_RESTRICTION( IF_SALV_C_LAYOUT=>RESTRICT_NONE ).
	  
	  "ALV 출력
    LR_TABLE->DISPLAY( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>WWW_DOWNLOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CPROG                       TYPE        CPROG (DEFAULT =SY-CPROG)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD WWW_DOWNLOAD.

		CALL FUNCTION 'ZCOCCM_DOWNLOAD_FORM_SMW0'
		  EXPORTING
		    I_OBJID = IV_OBJID
		  EXCEPTIONS
		    NO_FILE_FOUNDED = 1
		    OTHERS          = 2.
		    
		CASE SY-SUBRC.
		  WHEN 1.
		    MESSAGE S026 DISPLAY LIKE ZCOC_E.
		ENDCASE.

  ENDMETHOD.
  
  
* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>XXL_DOWNLOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FILENAME                    TYPE        STRING(OPTIONAL)
* | [--->] IV_START_LINE                  TYPE        INT4 (DEFAULT =2)
* | [--->] IV_COUNT                       TYPE        INT4 (DEFAULT =10000)
* | [--->] IS_HEADER_STR                  TYPE        ANY
* | [--->] IT_FDCAT                       TYPE        LVC_T_FCAT(OPTIONAL)
* | [--->] IT_DATA                        TYPE        STANDARD TABLE
* | [--->] IT_EXCLUDE_FIELD               TYPE        FIELDNAME_T(OPTIONAL)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD XXL_DOWNLOAD.
*&-------------------------------------------------------------------&*
* DESCRIPTION : EXCEL DOWNLOAD
* DEVELOPER :
* CREATION DATE :
* TECH. SCRIPT :
*&-------------------------------------------------------------------&*
* IV_FILENAME   : 파일경로
* IV_START_LINE : 시작라인 지정
* IV_COUNT      : 양이 많을 경우, 잘라서 읽어 오기 위한 라인 수
* IS_HEADER_STR : 헤더 텍스트
* IT_FDCAT      : 미구현
* IT_DATA       : 미구현
*&-------------------------------------------------------------------&*

    DATA: LO_APPLICATION TYPE OLE2_OBJECT,
          LO_WORKBOOKS   TYPE OLE2_OBJECT,
          LO_WORKBOOK    TYPE OLE2_OBJECT,
          LO_WORKSHEET   TYPE OLE2_OBJECT,
          LO_RANGE       TYPE OLE2_OBJECT,
          LO_INTERIOR    TYPE OLE2_OBJECT,
          LO_FONT        TYPE OLE2_OBJECT,
          LO_CELL        TYPE OLE2_OBJECT,
          LO_BEGIN_CELL  TYPE OLE2_OBJECT,
          LO_END_CELL    TYPE OLE2_OBJECT.

    DATA: LV_RC     TYPE I,
          LV_NAME   TYPE DDTEXT,
          LV_LIMIT  TYPE I,
          LV_COUNT  TYPE I,
          LV_APPEND TYPE I,
          LV_BEGIN  TYPE I,
          LV_END    TYPE I,
          LV_COL    TYPE I,
          LV_TOTAL  TYPE I,
          LV_PASTE  TYPE C.

    DATA: LO_DREF     TYPE REF TO DATA,
          LR_TABDESCR TYPE REF TO CL_ABAP_STRUCTDESCR,
          LT_DFIES    TYPE DDFIELDS,
          LS_ROW_DATA TYPE USMD_CHARLINE,
          LT_ROW_DATA TYPE TABLE OF USMD_CHARLINE.

*-- GET COLUMNS INFO
    CREATE DATA LO_DREF LIKE LINE OF IT_DATA[].
    LR_TABDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( LO_DREF ).
    LT_DFIES = CL_SALV_DATA_DESCR=>READ_STRUCTDESCR( LR_TABDESCR ).

*-- SET ROW LIMIT
    IF LV_COUNT BETWEEN 500 AND 50000.
      LV_LIMIT = IV_COUNT.
    ELSE.
      LV_LIMIT = 50000.
    ENDIF.

    DATA(LV_FILEPATH) = ZCL_SCO_COMM=>FILE_SAVE_DIALOG( IV_FILENAME = CONV #( IV_FILENAME ) ).
    CHECK LV_FILEPATH IS NOT INITIAL.

*---------------------------------------------------------------------*
*-- OPEN EXCEL OLE PROCESS
*---------------------------------------------------------------------*
    DATA LV_VISIBLE TYPE I.

*-- EXECUTE EXCEL LO_APPLICATION
    IF LO_APPLICATION-HEADER = SPACE OR LO_APPLICATION-HANDLE = -1.
      CREATE OBJECT LO_APPLICATION 'EXCEL.APPLICATION'.
    ENDIF.

*-- DISPLAY ON SCREEN(1: DISPLAY)
*    SET PROPERTY OF LO_APPLICATION 'VISIBLE' = 1.

**-- SET WORKBOOKS
    CALL METHOD OF LO_APPLICATION 'WORKBOOKS' = LO_WORKBOOKS.
    CALL METHOD OF LO_WORKBOOKS 'ADD' = LO_WORKBOOK.
    CALL METHOD OF LO_APPLICATION 'WORKSHEETS' = LO_WORKSHEET.
    CALL METHOD OF LO_APPLICATION 'WORKSHEETS' = LO_WORKSHEET
      EXPORTING
        #1 = 1.

    CALL METHOD OF LO_WORKSHEET 'ACTIVATE'.


*---------------------------------------------------------------------*
*-- MAKE HEADER LINE
*---------------------------------------------------------------------*
    IF IT_EXCLUDE_FIELD[] IS NOT INITIAL.
      SORT IT_EXCLUDE_FIELD BY TABLE_LINE.
    ENDIF.

    LOOP AT LT_DFIES REFERENCE INTO DATA(LS_DFIES).

      READ TABLE IT_EXCLUDE_FIELD WITH KEY TABLE_LINE = LS_DFIES->FIELDNAME TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        DELETE LT_DFIES.
        CONTINUE.
      ENDIF.

      ADD 1 TO LV_COL.

      IF IS_HEADER_STR IS INITIAL.
        IF LS_DFIES->REPTEXT IS INITIAL.
          LS_DFIES->REPTEXT = LS_DFIES->FIELDTEXT.
        ENDIF.
        LV_NAME = LS_DFIES->REPTEXT.
      ELSE.
        ASSIGN COMPONENT LS_DFIES->FIELDNAME OF STRUCTURE IS_HEADER_STR TO FIELD-SYMBOL(<FS_NAME>).
        IF <FS_NAME> IS ASSIGNED.
          LV_NAME = <FS_NAME>.
        ENDIF.
      ENDIF.

*-- SET HEADER CELL STYLE & VALUE
      IF LV_NAME IS NOT INITIAL.
        CALL METHOD OF LO_WORKSHEET 'CELLS' = LO_CELL
          EXPORTING #1 = LV_COL.
        CALL METHOD OF LO_CELL 'BORDERAROUND'
          EXPORTING
            #1 = 1
            #2 = 2.
        GET PROPERTY OF LO_CELL 'INTERIOR' = LO_INTERIOR.
        SET PROPERTY OF LO_INTERIOR 'COLORINDEX' = 15.
        GET PROPERTY OF LO_CELL 'FONT' = LO_FONT.
        SET PROPERTY OF LO_FONT 'SIZE' = 10.

        SET PROPERTY OF LO_CELL 'VALUE' = LV_NAME.
      ENDIF.

      CLEAR LV_NAME.

    ENDLOOP.

    LV_COL   = LINES( LT_DFIES ). "CLUMN COUNT
    LV_TOTAL = LINES( IT_DATA ).  "TOTAL LINES

    ADD 1 TO LV_COUNT.
    ADD 1 TO LV_TOTAL.

*---------------------------------------------------------------------*
*-- COPY & PASTE
*---------------------------------------------------------------------*
    LOOP AT IT_DATA ASSIGNING FIELD-SYMBOL(<LS_DATA>).

      ADD 1 TO LV_COUNT.
      ADD 1 TO LV_APPEND.

      IF LV_COUNT = LV_LIMIT.
        LV_PASTE = ABAP_TRUE.
      ENDIF.

      AT LAST.
        LV_PASTE = ABAP_TRUE.
      ENDAT.

*-- CONVERT COLUMNS TO ROW DATA
      CALL METHOD ZCL_SCO_COMM=>CONVERT_STR_TO_LINE
        EXPORTING
          IS_STR      = <LS_DATA>
          IT_DDFIELDS = LT_DFIES
        CHANGING
          CS_ROW_DATA = LS_ROW_DATA.

      APPEND LS_ROW_DATA TO LT_ROW_DATA.
      CLEAR LS_ROW_DATA.

*-- COPY TO CLIPBOARD
      IF LV_PASTE IS NOT INITIAL.
        IF LV_BEGIN IS INITIAL.
          LV_BEGIN = 2.
        ELSE.
          LV_BEGIN = LV_END + 1.
        ENDIF.

        LV_END = LV_END + LV_COUNT.

        CALL METHOD CL_GUI_FRONTEND_SERVICES=>CLIPBOARD_EXPORT
          IMPORTING
            DATA                 = LT_ROW_DATA
          CHANGING
            RC                   = LV_RC
          EXCEPTIONS
            CNTL_ERROR           = 1
            ERROR_NO_GUI         = 2
            NOT_SUPPORTED_BY_GUI = 3
            OTHERS               = 4.

        IF SY-SUBRC IS NOT INITIAL.
          CALL METHOD OF LO_APPLICATION 'QUIT'.
          MESSAGE X001(KX).
        ENDIF.

*-- SET SELECT RANGE
        CALL METHOD OF LO_WORKSHEET 'CELLS' = LO_BEGIN_CELL
          EXPORTING
            #1 = LV_BEGIN
            #2 = 1.          "START CELL POINT

        CALL METHOD OF LO_WORKSHEET 'CELLS' = LO_END_CELL
          EXPORTING
            #1 = LV_END
            #2 = LV_COL.     "END CELL POINT

        CALL METHOD OF LO_WORKSHEET 'RANGE' = LO_RANGE
          EXPORTING
            #1 = LO_BEGIN_CELL
            #2 = LO_END_CELL.

        CALL METHOD OF LO_RANGE 'SELECT'.

*-- SET FONT SIZE
        GET PROPERTY OF LO_RANGE 'FONT' = LO_FONT.
        SET PROPERTY OF LO_FONT 'SIZE' = 10.

*-- PASTE DATA
        CALL METHOD OF LO_WORKSHEET 'PASTE'.
        CALL FUNCTION 'FLUSH'
          EXCEPTIONS
            OTHERS = 0.

        CLEAR: LT_ROW_DATA, LV_COUNT, LV_PASTE.

      ENDIF.

      ZCL_SCO_COMM=>SHOW_PROGRESS_PERCENTAGE(
        IV_TOTAL_LINES = LV_TOTAL
        IV_COUNT       = LV_APPEND
        IV_TEXT        = CONV #( `DOWNLOAD IN PROGRESS... `) ) .

    ENDLOOP.

*---------------------------------------------------------------------*
*-- CLOSE OLE PROGRESS
*---------------------------------------------------------------------*
    CALL METHOD OF LO_WORKSHEET 'CELLS' = LO_BEGIN_CELL
      EXPORTING
        #1 = 1
        #2 = 1.

    CALL METHOD OF LO_WORKSHEET 'CELLS' = LO_END_CELL
      EXPORTING
        #1 = 1
        #2 = 1.

    CALL METHOD OF LO_WORKSHEET 'RANGE' = LO_RANGE
      EXPORTING
        #1 = LO_BEGIN_CELL
        #2 = LO_END_CELL.

    CALL METHOD OF LO_RANGE 'SELECT'.

*-- INITIALIZE CLIPBOARD MEMORY
    CLEAR LT_ROW_DATA.
    CL_GUI_FRONTEND_SERVICES=>CLIPBOARD_EXPORT( IMPORTING DATA       = LT_ROW_DATA
                                                 CHANGING RC         = LV_RC
                                               EXCEPTIONS CNTL_ERROR = 1
                                                          OTHERS     = 4 ).

*-- COLUMNS WIDTH OPTIMIZE
    CALL METHOD OF LO_WORKSHEET 'COLUMNS' = LO_CELL.
    CALL METHOD OF LO_CELL 'AUTOFIT'.

    IF LV_FILEPATH IS INITIAL.
      CALL METHOD OF LO_WORKSHEET 'SAVEAS'.
    ELSE.
      CALL METHOD OF LO_WORKSHEET 'SAVEAS'
        EXPORTING
          #1 = LV_FILEPATH.
    ENDIF.

    CALL METHOD OF LO_APPLICATION 'QUIT'.

    WAIT UP TO 1 SECONDS.

    CALL METHOD CL_GUI_FRONTEND_SERVICES=>EXECUTE
      EXPORTING
        DOCUMENT               = LV_FILEPATH
      EXCEPTIONS
        CNTL_ERROR             = 1
        ERROR_NO_GUI           = 2
        BAD_PARAMETER          = 3
        FILE_NOT_FOUND         = 4
        PATH_NOT_FOUND         = 5
        FILE_EXTENSION_UNKNOWN = 6
        ERROR_EXECUTE_FAILED   = 7
        SYNCHRONOUS_FAILED     = 8
        NOT_SUPPORTED_BY_GUI   = 9
        OTHERS                 = 10.

    FREE OBJECT: LO_RANGE,
                 LO_WORKSHEET,
                 LO_WORKBOOK,
                 LO_WORKBOOKS,
                 LO_APPLICATION.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>XXL_DOWNLOAD2
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FILENAME                    TYPE        STRING(OPTIONAL)
* | [--->] IV_START_LINE                  TYPE        INT4 (DEFAULT =2)
* | [--->] IV_COUNT                       TYPE        INT4 (DEFAULT =10000)
* | [--->] IS_HEADER_STR                  TYPE        ANY
* | [--->] IT_FDCAT                       TYPE        LVC_T_FCAT(OPTIONAL)
* | [--->] IT_DATA                        TYPE        STANDARD TABLE
* | [--->] IT_EXCLUDE_FIELD               TYPE        FIELDNAME_T(OPTIONAL)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD XXL_DOWNLOAD2.
*&-------------------------------------------------------------------&*
* DESCRIPTION : EXCEL DOWNLOAD
* DEVELOPER :
* CREATION DATE :
* TECH. SCRIPT :
*&-------------------------------------------------------------------&*
* IV_FILENAME : FILE PATH
* IV_START_LINE : START LINE
* IV_COUNT : IF MASS DATA, IT IS A BUNCH OF UNIT AT ONCE
* IS_HEADER_STR : HEADER TEXT
* IT_FDCAT :
* IT_DATA :
*&-------------------------------------------------------------------&*

    DATA: LV_RC     TYPE I,
          LV_NAME   TYPE DDTEXT,
          LV_LIMIT  TYPE I,
          LV_COUNT  TYPE I,
          LV_APPEND TYPE I,
          LV_BEGIN  TYPE I,
          LV_END    TYPE I,
          LV_COL    TYPE I,
          LV_TOTAL  TYPE I,
          LV_PASTE  TYPE C.

    DATA: LO_DREF     TYPE REF TO DATA,
          LR_TABDESCR TYPE REF TO CL_ABAP_STRUCTDESCR,
          LT_DFIES    TYPE DDFIELDS,
          LS_ROW_DATA TYPE USMD_CHARLINE,
          LT_ROW_DATA TYPE TABLE OF USMD_CHARLINE.

*-- GET COLUMNS INFO
    CREATE DATA LO_DREF LIKE LINE OF IT_DATA[].
    LR_TABDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( LO_DREF ).
    LT_DFIES = CL_SALV_DATA_DESCR=>READ_STRUCTDESCR( LR_TABDESCR ).

*---------------------------------------------------------------------*
*-- OPEN EXCEL OLE PROCESS
*---------------------------------------------------------------------*
    DATA: EXCEL    TYPE OLE2_OBJECT,
          BOOKS    TYPE OLE2_OBJECT,
          BOOK     TYPE OLE2_OBJECT,
          CELL     TYPE OLE2_OBJECT,
          FONT     TYPE OLE2_OBJECT,
          INTERIOR TYPE OLE2_OBJECT.

    "엑셀 초기화
    CALL FUNCTION 'FLUSH'
      EXCEPTIONS
        CNTL_SYSTEM_ERROR = 1
        CNTL_ERROR        = 2
        OTHERS            = 3.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    "엑셀 시작
    CREATE OBJECT EXCEL 'EXCEL.APPLICATION'.
    IF SY-SUBRC <>  0.
      FREE OBJECT EXCEL.
      MESSAGE S000(0K) WITH 'ERROR OPENING EXCEL.APPLICATION' DISPLAY LIKE 'E'.
    ENDIF.

    CALL METHOD OF EXCEL 'WORKBOOKS' = BOOKS.

    CALL METHOD OF BOOKS 'ADD' = BOOK.

*---------------------------------------------------------------------*
*-- MAKE HEADER LINE
*---------------------------------------------------------------------*
    IF IT_EXCLUDE_FIELD[] IS NOT INITIAL.
      SORT IT_EXCLUDE_FIELD BY TABLE_LINE.
    ENDIF.

    LOOP AT LT_DFIES REFERENCE INTO DATA(LS_DFIES).

      READ TABLE IT_EXCLUDE_FIELD WITH KEY TABLE_LINE = LS_DFIES->FIELDNAME TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        DELETE LT_DFIES.
        CONTINUE.
      ENDIF.

      ADD 1 TO LV_COL.

      IF IS_HEADER_STR IS INITIAL.
        IF LS_DFIES->REPTEXT IS INITIAL.
          LS_DFIES->REPTEXT = LS_DFIES->FIELDTEXT.
        ENDIF.
        LV_NAME = LS_DFIES->REPTEXT.
      ELSE.
        ASSIGN COMPONENT LS_DFIES->FIELDNAME OF STRUCTURE IS_HEADER_STR TO FIELD-SYMBOL(<FS_NAME>).
        IF <FS_NAME> IS ASSIGNED.
          LV_NAME = <FS_NAME>.
        ENDIF.
      ENDIF.

*-- SET HEADER CELL STYLE & VALUE
      IF LV_NAME IS NOT INITIAL.

        "필드
        CALL METHOD OF EXCEL
            'CELLS' = CELL
            EXPORTING
              #1 = 1
              #2 = LV_COL.

        SET PROPERTY OF CELL 'VALUE'          = LV_NAME.
        GET PROPERTY OF CELL 'INTERIOR'       = INTERIOR.
        SET PROPERTY OF INTERIOR 'COLORINDEX' = 6.
        GET PROPERTY OF CELL 'FONT' = FONT.
        SET PROPERTY OF FONT 'SIZE' = 10.

        CALL METHOD OF CELL 'BORDERAROUND'
          EXPORTING
            #1 = 1
            #2 = 2.
      ENDIF.

      CLEAR LV_NAME.

    ENDLOOP.

    "엑셀 출력
    SET PROPERTY OF EXCEL 'VISIBLE' = 1.

    "엑셀 초기화
    CALL FUNCTION 'FLUSH'
      EXCEPTIONS
        CNTL_SYSTEM_ERROR = 1
        CNTL_ERROR        = 2
        OTHERS            = 3.

    FREE OBJECT: INTERIOR,
                 FONT,
                 CELL,
                 BOOK,
                 BOOKS,
                 EXCEL.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>XXL_UPLOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FILENAME                    TYPE        STRING
* | [--->] IV_SHEETNO                     TYPE        INT4 (DEFAULT =1)
* | [--->] IV_START_ROW                   TYPE        INT4 (DEFAULT =2)
* | [--->] IV_SPLIT_ROW                   TYPE        INT4 (DEFAULT =10000)
* | [<---] ET_TAB_CONVERTED_DATA          TYPE        STANDARD TABLE
* | [<-()] RT_RETURN                      TYPE        BAPIRET2_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD XXL_UPLOAD.
*&-------------------------------------------------------------------&*
* DESCRIPTION : EXCEL UPLOAD
* DEVELOPER :
* CREATION DATE :
* TECH. SCRIPT :
*&-------------------------------------------------------------------&*
*IV_FILENAME  : 파일경로
*IV_START_ROW : 시작라인 지정
*IV_SPLIT_ROW : 양이 많을 경우, 잘라서 읽어오는 라인 수
*&-------------------------------------------------------------------&*
    DATA: LT_FILE        TYPE FILETABLE,
          LT_DFIES       TYPE DDFIELDS,
          LS_FILE        TYPE LINE OF FILETABLE,
          LV_USER_ACTION TYPE I,
          LV_BEGIN       TYPE I VALUE 1,
          LV_END         TYPE I,
          LV_CONV_ROW    TYPE I,
          LV_SUBRC       TYPE SY-SUBRC,
          LT_ROW         TYPE USMD_T_CHARLINE,
          LT_CELLS       TYPE YPJO_XXL_DW_T,
          LO_SREF        TYPE REF TO DATA,
          LR_DESCR       TYPE REF TO CL_ABAP_STRUCTDESCR.

    FIELD-SYMBOLS <LT_DATA> TYPE STANDARD TABLE.

    DEFINE _PROG.
      CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
       EXPORTING
         PERCENTAGE       = &1
         TEXT             = &2.
    END-OF-DEFINITION.

    CLEAR: MV_ROWNO.  "EXCEL ROW NUMBER

*-- GET FILENAME
    IF IV_FILENAME IS INITIAL.

      CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
        EXPORTING
          WINDOW_TITLE            = 'SELECT FILE'
          DEFAULT_EXTENSION       = '*.XLSX,*.XLS'
          MULTISELECTION          = SPACE
        CHANGING
          FILE_TABLE              = LT_FILE
          RC                      = LV_SUBRC
          USER_ACTION             = LV_USER_ACTION
        EXCEPTIONS
          FILE_OPEN_DIALOG_FAILED = 1
          CNTL_ERROR              = 2
          ERROR_NO_GUI            = 3
          NOT_SUPPORTED_BY_GUI    = 4
          OTHERS                  = 5.

      IF SY-SUBRC IS NOT INITIAL.
        EXIT.
      ENDIF.

      IF LV_USER_ACTION = CL_GUI_FRONTEND_SERVICES=>ACTION_CANCEL.
        MESSAGE S161(ALVHT).
        RETURN.
      ENDIF.

      LS_FILE = LT_FILE[ 1 ].

    ELSE.

      LS_FILE-FILENAME = IV_FILENAME.

    ENDIF.

    CHECK LS_FILE-FILENAME IS NOT INITIAL.

*-- SET ROW, COLUMN RANGE
    IF IV_START_ROW > 0.
      LV_BEGIN = IV_START_ROW.
    ENDIF.

*-- GET TABLE DDIC INFO.
    ASSIGN ET_TAB_CONVERTED_DATA TO <LT_DATA>.
    IF <LT_DATA> IS ASSIGNED.
      CREATE DATA LO_SREF LIKE LINE OF <LT_DATA>.
      LR_DESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( LO_SREF ).
      LT_DFIES  = CL_SALV_DATA_DESCR=>READ_STRUCTDESCR( LR_DESCR ).
    ELSE.
      EXIT.
    ENDIF.

*-- COLUMN COUNT
*    DESCRIBE TABLE LT_DFIES LINES DATA(LV_COL).
    DATA(LV_COL) = LINES( LT_DFIES ).

*-- SET SPLIT ROW
    IF IV_SPLIT_ROW BETWEEN 500 AND 50000.
      LV_END = IV_SPLIT_ROW.
    ELSE.
      LV_END = 50000.
    ENDIF.

    DO.

*-- GET EXCEL ROW DATA
*      DATA LV_FILENAME TYPE STRING.
*      LV_FILENAME = LS_FILE-FILENAME.
      DATA(LV_FILENAME) = CONV STRING( LS_FILE-FILENAME ).

      CLEAR: LT_CELLS, LT_ROW.

      CALL FUNCTION 'Z_CO_XXL_TO_INT'
        EXPORTING
          FILENAME                = LV_FILENAME
          I_BEGIN_COL             = 1
          I_BEGIN_ROW             = LV_BEGIN
          I_END_COL               = LV_COL
          I_END_ROW               = LV_END
        TABLES
          INTERN                  = LT_CELLS
        EXCEPTIONS
          INCONSISTENT_PARAMETERS = 1
          UPLOAD_OLE              = 2
          OTHERS                  = 3.

      IF SY-SUBRC <> 0.
        EXIT.
      ENDIF.

*-- CONVERT TO TARGET INTERNAL TABLE
      IF LT_CELLS IS NOT INITIAL.

        RT_RETURN = ZCL_SCO_COMM=>CONVERT_CELL_TO_TABLE(
                                  EXPORTING IT_CELLS = LT_CELLS
                                            IT_DFIES = LT_DFIES
                                  IMPORTING EV_CONV_ROW = LV_CONV_ROW
                                  CHANGING  CT_CONV_TABLE = ET_TAB_CONVERTED_DATA ).
      ENDIF.

      IF ( LV_END - LV_BEGIN ) > LV_CONV_ROW.
        DATA(LV_CNT) = CONV STRING( LINES( ET_TAB_CONVERTED_DATA ) ).
        CONCATENATE LV_CNT ` LINES CONVERTED.` INTO DATA(LV_TEXT).
        _PROG 100 LV_TEXT.
        EXIT.
      ENDIF.

      LV_BEGIN = LV_END + 1.
      LV_END = LV_END + IV_SPLIT_ROW.
      CLEAR LV_CONV_ROW.

    ENDDO.

  ENDMETHOD.  
  
  
* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_KSGRU_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KSGRU                        TYPE        RKSB1-KSGRU
* | [--->] I_KSGRU                        TYPE        RKSB1-KSGRU
* | [<-()] E_DESCRIPT                     TYPE        SETTEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_KSGRU_TEXT.

		CLEAR: EV_SUBRC, E_DESCRIPT.
		
    SELECT SINGLE SETNAME
      FROM SETHEADER
     WHERE SETCLASS = '0101'
       AND SUBCLASS = @I_KOKRS
       AND SETNAME  = @I_KSGRU
      INTO @DATA(LV_SETNAME).

		IF SY-SUBRC = 0.
		
	    SELECT SINGLE DESCRIPT
	      FROM SETHEADERT
	     WHERE SETCLASS = '0101'
	       AND SUBCLASS = @I_KOKRS
	       AND SETNAME  = @I_KSGRU
	       AND LANGU    = @SY-LANGU
	      INTO @E_DESCRIPT.
	      
	  ELSE.
	  	
	  	EV_SUBRC = 4.
	  	
	  ENDIF.

  ENDMETHOD.

  
* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>BACKGROUND_JOB_PROCESS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CPROG                       TYPE        CPROG (DEFAULT =SY-CPROG)
* | [--->] IT_RSPARAMS                    TYPE        TY_RSPARAMS(OPTIONAL)
* | [<-->] CV_JOBNAME                     TYPE        BTCJOB(OPTIONAL)
* | [<-()] RV_SUBRC                       TYPE        SY-SUBRC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD BACKGROUND_JOB_PROCESS.
*---------------------------------------------------------------------*
*IV_CPROG    : 기본값은 자기 자신 프로그램을 호출
*CV_JOBNAME  : JOBNAME을 지정 안할 경우 'JOB_'+IV_CPROG+'_SY-DATUM SY-UZEIT'로 생성
*IT_RSPARAMS : 프로그램 호출 시 파라미터 값 지정
*---------------------------------------------------------------------*

    DATA: LT_RSPARAMS TYPE TABLE OF RSPARAMS,
          LS_RSPARAMS TYPE RSPARAMS,
          LV_JOBCOUNT TYPE BTCJOBCNT.

    TRY.

        "입력된 파라미터가 없으면 프로그램 화면의 파라미터 값을 읽어온다.
        IF IT_RSPARAMS[] IS INITIAL.
          RV_SUBRC = ZCL_COC_COMM=>GET_PGM_PARAMETER( EXPORTING IV_REPID  = IV_CPROG
                                                      IMPORTING ET_SELTAB = LT_RSPARAMS ).
        ELSE.
          LT_RSPARAMS[] = IT_RSPARAMS[].
        ENDIF.

        IF LT_RSPARAMS[] IS INITIAL.
          RV_SUBRC = 2.
          EXIT.
        ENDIF.

        "JOB NAME이 없을 경우 'JOB_'+IV_CPROG+'_SY-DATUM SY-UZEIT'로 생성
        IF CV_JOBNAME IS INITIAL.
          CV_JOBNAME = 'JOB_' && IV_CPROG && '_' && SY-DATUM && SY-UZEIT.
        ENDIF.

        "JOB 생성
        CALL FUNCTION 'JOB_OPEN'
          EXPORTING
            JOBNAME          = CV_JOBNAME
            SDLSTRTDT        = SY-DATUM
            SDLSTRTTM        = SY-UZEIT
          IMPORTING
            JOBCOUNT         = LV_JOBCOUNT
          EXCEPTIONS
            CANT_CREATE_JOB  = 1
            INVALID_JOB_DATA = 2
            JOBNAME_MISSING  = 3
            OTHERS           = 4.
        IF SY-SUBRC <> 0.
          RV_SUBRC = SY-SUBRC.
          EXIT.
        ENDIF.

        SUBMIT (IV_CPROG) WITH SELECTION-TABLE LT_RSPARAMS
                          USER SY-UNAME
                          VIA JOB CV_JOBNAME
                          NUMBER LV_JOBCOUNT
                          AND RETURN.

        IF SY-SUBRC = 0.

          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              JOBCOUNT             = LV_JOBCOUNT
              JOBNAME              = CV_JOBNAME
              STRTIMMED            = ABAP_TRUE
            EXCEPTIONS
              CANT_START_IMMEDIATE = 1
              INVALID_STARTDATE    = 2
              JOBNAME_MISSING      = 3
              JOB_CLOSE_FAILED     = 4
              JOB_NOSTEPS          = 5
              JOB_NOTEX            = 6
              LOCK_FAILED          = 7
              INVALID_TARGET       = 8
              OTHERS               = 9.

          IF SY-SUBRC <> 0.
            RV_SUBRC = SY-SUBRC.
            IF SY-BATCH IS NOT INITIAL.
              "
            ENDIF.
            EXIT.
          ENDIF.

        ENDIF.

      CATCH CX_ROOT INTO MO_ROOT.
        RV_SUBRC = 11.
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>BACKGROUND_JOB_PROCESS_STEP
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_BPJOB_LIST                  TYPE        TY_BP_JOB_STEP_T(OPTIONAL)
* | [<-()] RV_SUBRC                       TYPE        SY-SUBRC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD BACKGROUND_JOB_PROCESS_STEP.
*---------------------------------------------------------------------*
*IV_CPROG    : 기본값은 자기 자신 프로그램을 호출
*CV_JOBNAME  : JOBNAME을 지정 안할 경우 'JOB_'+IV_CPROG+'_SY-DATUM SY-UZEIT'로 생성
*IT_RSPARAMS : 프로그램 호출 시 파라미터 값 지정
*---------------------------------------------------------------------*
* EX)
*    DATA IT_BPJOB_LIST TYPE ZCL_COC_COMM=>TY_BP_JOB_STEP_T.
*    IT_BPJOB_LIST = VALUE #( BASE IT_BPJOB_LIST ( CPROG = 'ZCOXXX1'
*                                                  T_RSPARAMS = VALUE #( ( SELNAME = 'P_XXX' KIND = 'P' LOW = P_XXX )
*                                                                        ( SELNAME = 'P_YYY' KIND = 'P' LOW = P_YYY ) ) )
*                                                ( CPROG = 'ZCOXXX2'
*                                                  T_RSPARAMS = VALUE #( ( SELNAME = 'P_XXX' KIND = 'P' LOW = P_XXX )
*                                                                        ( SELNAME = 'P_YYY' KIND = 'P' LOW = P_YYY ) ) )
*                                                ( CPROG = 'ZCOXXX3'
*                                                  T_RSPARAMS = VALUE #( ( SELNAME = 'P_XXX' KIND = 'P' LOW = P_XXX )
*                                                                        ( SELNAME = 'P_YYY' KIND = 'P' LOW = P_YYY ) ) ) ).
*    ZCL_COC_COMM=>BACKGROUND_JOB_PROCESS_STEP( IT_BPJOB_LIST ).
*---------------------------------------------------------------------*
    DATA: LT_RSPARAMS          TYPE TABLE OF RSPARAMS,
          LS_RSPARAMS          TYPE RSPARAMS,
          LV_JOBCOUNT          TYPE BTCJOBCNT,
          LV_JOBNAME           TYPE BTCJOB,

          LV_PRED_JOBCOUNT     TYPE BTCJOBCNT,
          LV_PRED_JOBNAME      TYPE BTCJOB,
          LV_PREDJOB_CHECKSTAT TYPE BTCCKSTAT,
          LV_STRTIMMED         TYPE CHAR01 VALUE ABAP_ON.

    TRY.

        "여러 건의 JOB을 순차적으로 SCHEDULING 한다.
        LOOP AT IT_BPJOB_LIST INTO DATA(LS_BPJOB_LIST).

          "입력된 파라미터가 없으면 프로그램 화면의 파라미터 값을 읽어온다.
          IF LS_BPJOB_LIST-T_RSPARAMS IS INITIAL.
            RV_SUBRC = ZCL_COC_COMM=>GET_PGM_PARAMETER( EXPORTING IV_REPID  = LS_BPJOB_LIST-CPROG
                                                        IMPORTING ET_SELTAB = LT_RSPARAMS ).
          ELSE.
            LT_RSPARAMS = LS_BPJOB_LIST-T_RSPARAMS.
          ENDIF.

          IF LT_RSPARAMS IS INITIAL.
            RV_SUBRC = 12.
            EXIT.
          ENDIF.

          "JOB NAME이 없을 경우 'JOB_'+IV_CPROG+'_SY-DATUM SY-UZEIT'로 생성
          IF LS_BPJOB_LIST-JOBNAME IS INITIAL.
            LV_JOBNAME = 'JOB_' && LS_BPJOB_LIST-CPROG && '_' && SY-DATUM && SY-UZEIT.
          ELSE.
          	LV_JOBNAME = LS_BPJOB_LIST-JOBNAME.
          ENDIF.

          "JOB 생성
          CALL FUNCTION 'JOB_OPEN'
            EXPORTING
              JOBNAME          = LV_JOBNAME
              SDLSTRTDT        = SY-DATUM
              SDLSTRTTM        = SY-UZEIT
            IMPORTING
              JOBCOUNT         = LV_JOBCOUNT
            EXCEPTIONS
              CANT_CREATE_JOB  = 1
              INVALID_JOB_DATA = 2
              JOBNAME_MISSING  = 3
              OTHERS           = 4.
          IF SY-SUBRC <> 0.
            RV_SUBRC = SY-SUBRC.
            EXIT.
          ENDIF.

          SUBMIT (LS_BPJOB_LIST-CPROG) WITH SELECTION-TABLE LT_RSPARAMS
                                       USER SY-UNAME
                                       VIA JOB LV_JOBNAME
                                       NUMBER LV_JOBCOUNT
                                       AND RETURN.

          IF SY-SUBRC = 0.

            CALL FUNCTION 'JOB_CLOSE'
              EXPORTING
                JOBCOUNT             = LV_JOBCOUNT
                JOBNAME              = LV_JOBNAME
                STRTIMMED            = LV_STRTIMMED
                PREDJOB_CHECKSTAT    = LV_PREDJOB_CHECKSTAT
                PRED_JOBCOUNT        = LV_PRED_JOBCOUNT
                PRED_JOBNAME         = LV_PRED_JOBNAME
              EXCEPTIONS
                CANT_START_IMMEDIATE = 1
                INVALID_STARTDATE    = 2
                JOBNAME_MISSING      = 3
                JOB_CLOSE_FAILED     = 4
                JOB_NOSTEPS          = 5
                JOB_NOTEX            = 6
                LOCK_FAILED          = 7
                INVALID_TARGET       = 8
                OTHERS               = 9.

            IF SY-SUBRC = 0.
              LV_PRED_JOBCOUNT     = LV_JOBCOUNT.
              LV_PRED_JOBNAME      = LV_JOBNAME.
              LV_STRTIMMED         = SPACE.
              LV_PREDJOB_CHECKSTAT = ABAP_ON.
            ELSE.
              RV_SUBRC = SY-SUBRC.
              IF SY-BATCH IS NOT INITIAL.
                "
              ENDIF.
              EXIT.
            ENDIF.

          ENDIF.

        ENDLOOP.

      CATCH CX_ROOT INTO MO_ROOT.
        RV_SUBRC = 11.
    ENDTRY.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CALC_FORMULA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FORMULA                     TYPE        QEIFFORMEL
* | [--->] IT_DATA                        TYPE        TY_FORMULA_T(OPTIONAL)
* | [<-->] CV_SUBRC                       TYPE        SY-SUBRC(OPTIONAL)
* | [<-()] EV_RESULT                      TYPE        F
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CALC_FORMULA.

*IV FORMULA : 계산식을 받아온다.
*IT_DATA    : 계산식 중 대체될 변수의 값을 지정한다.
*CV_SUBRC   : 계산식에 에러가 존재할 경우 SUBRC = 4
*EV_RESULT  : 계산식의 결과값을 리턴한다.


    DATA: LV_FORMULA    TYPE QEIFFORMEL,
          LT_PARA_VALUE TYPE ZQMT_FORM_PARAM_VALUE.

    CHECK IV_FORMULA IS NOT INITIAL.

    SPLIT IV_FORMULA AT SPACE INTO TABLE DATA(LT_FORMULA_FIELDS).

    IF IT_DATA IS NOT INITIAL.
      LOOP AT IT_DATA INTO DATA(LS_DATA).
        DATA(LV_INDEX) = CONV NUMC4( SY-TABIX ).
        LT_PARA_VALUE = VALUE #( BASE LT_PARA_VALUE ( MERKNR  = LV_INDEX
                                                      FORMPAR = COND #( WHEN LS_DATA-FIELD <> SPACE THEN 'VV' )
                                                      VALUE   = LS_DATA-VALUE ) ).

        READ TABLE LT_FORMULA_FIELDS ASSIGNING FIELD-SYMBOL(<FS_FORMULA>) WITH KEY TABLE_LINE = LS_DATA-FIELD.
        IF SY-SUBRC = 0.
          <FS_FORMULA> = 'VV' && LV_INDEX.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT LT_FORMULA_FIELDS INTO DATA(LS_FORMULA_FIELDS).
      CONCATENATE LV_FORMULA LS_FORMULA_FIELDS INTO LV_FORMULA SEPARATED BY SPACE.
    ENDLOOP.

    CALL FUNCTION 'QET4_EVAL_FORMULA'
      EXPORTING
        IV_FORMULA        = LV_FORMULA
        IT_PARA_VALUE     = LT_PARA_VALUE
      IMPORTING
        EV_RESULT         = EV_RESULT
      EXCEPTIONS
        CALCULATION_ERROR = 1
        OTHERS            = 2.

    IF SY-SUBRC <> 0.
      CV_SUBRC = 4.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CALL_TRANSACTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TCODE                       TYPE        TCODE
* | [--->] IV_NEW_SESSION                 TYPE        CHAR01 (DEFAULT ='X')
* | [--->] IV_MODE                        TYPE        CHAR01 (DEFAULT ='N')
* | [--->] IV_UPDATE                      TYPE        CHAR01 (DEFAULT ='A')
* | [--->] IV_UPDATE                      TYPE        CHAR01 (DEFAULT ='A')
* | [--->] IT_BDCDATA                     TYPE        TAB_BDCDATA(OPTIONAL)
* | [--->] IT_PARAMETER_IDS               TYPE        TAB_BDCDATA(OPTIONAL)
* | [<-()] RT_BDCMESSAGES                 TYPE        TAB_BDCMSGCOLL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CALL_TRANSACTION.
*---------------------------------------------------------------------*
*IV_TCODE         : T-CODE
*IV_NEW_SESSION   : 새창으로 시작(기본 설정)
*IV_MODE          : BDC MODE
*IV_UPDATE        : UPDATE MODE
*IT_BDCDATA       : BDC 수행 코드
*IT_PARAMETER_IDS : SET PARAMETER 지정
*       ->        IT_BDCDATA OR IT_PARAMETER_IDS 등록.
*---------------------------------------------------------------------*
*EX)
*    DATA(LV_PARA) = VALUE TAB_BDCDATA( ( FNAM = 'BLN' FVAL = '1000000000' )
*                                       ( FNAM = 'BUK' FVAL = 'L000' )
*                                       ( FNAM = 'GJR' FVAL = '2020' ) ).
*    ZCL_COC_COMM=>CALL_TRANSACTION( IV_TCODE         = 'FB03'
*                                    IT_PARAMETER_IDS = LV_PARA ).
*---------------------------------------------------------------------*
* 새 창으로 프로그램 호출 시 CTU_PARAMS 파라미터를 모두 허용하도록 변경
*---------------------------------------------------------------------*

    "여분창이 존재하지 않을 경우, 현재 창으로 호출
    CALL FUNCTION 'RM_FREE_SESSION_CHECK'
      EXCEPTIONS
        NO_FREE_SESSION = 1
        OTHERS          = 2.
    IF SY-SUBRC <> 0.
      IV_NEW_SESSION = SPACE.
    ENDIF.

    IF IV_NEW_SESSION = ABAP_ON.

      MESSAGE S000(0K) WITH 'OPENING.......'.

*      CALL FUNCTION 'CALL_TRANSACTION_FROM_TABLE'
*        STARTING NEW TASK 'DEMO'
*        EXPORTING
*          I_TCODE         = IV_TCODE
*          I_MODE          = IV_MODE
*          I_UPDATE        = IV_UPDATE
*        TABLES
*          T_BDCDATA       = IT_BDCDATA
*          T_BDCMESSAGES   = RT_BDCMESSAGES
*          T_PARAMETER_IDS = IT_PARAMETER_IDS
*        EXCEPTIONS
*          ERROR_FOUND     = 1
*          OTHERS          = 2.
      CALL FUNCTION 'ZCOCCM_CALL_TRANSACTION'
        STARTING NEW TASK 'DEMO'
        EXPORTING
          I_TCODE         = IV_TCODE
          IS_CTU_PARAMS   = IS_CTU_PARAMS
        TABLES
          T_BDCDATA       = IT_BDCDATA
          T_BDCMESSAGES   = RT_BDCMESSAGES
          T_PARAMETER_IDS = IT_PARAMETER_IDS
        EXCEPTIONS
          ERROR_FOUND     = 1
          OTHERS          = 2.

      WAIT UP TO 3 SECONDS.

    ELSE.

      CALL FUNCTION 'CALL_TRANSACTION_FROM_TABLE'
        EXPORTING
          I_TCODE         = IV_TCODE
          I_MODE          = IV_MODE
          I_UPDATE        = IV_UPDATE
        TABLES
          T_BDCDATA       = IT_BDCDATA
          T_BDCMESSAGES   = RT_BDCMESSAGES
          T_PARAMETER_IDS = IT_PARAMETER_IDS
        EXCEPTIONS
          ERROR_FOUND     = 1
          OTHERS          = 2.

    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CONVERSION_EXIT_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INPUT                       TYPE        ANY
* | [--->] IV_CONVEXIT                    TYPE        CONVEXIT(OPTIONAL)
* | [--->] IV_CONVERT_TYPE                TYPE        CHAR01 (DEFAULT ='I')
* | [--->] IV_DBFIELD                     TYPE        ROLLNAME(OPTIONAL)
* | [<---] EV_OUTPUT                      TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CONVERSION_EXIT_VALUE.

    DATA: LV_FUNCNAME TYPE FUNCNAME,
          LV_TYPE     TYPE STRING.

    CONSTANTS: LC_OUTPUT TYPE STRING VALUE '_OUTPUT',
               LC_INPUT  TYPE STRING VALUE '_INPUT'.

    CHECK IV_INPUT IS NOT INITIAL.

    CASE IV_CONVERT_TYPE.
      WHEN ZSCO0_I.
        LV_TYPE = LC_INPUT.
      WHEN ZSCO0_E.
        LV_TYPE = LC_OUTPUT.
      WHEN OTHERS.
        EXIT.
    ENDCASE.

    IF IV_CONVEXIT IS NOT INITIAL.     "USE CONV. EXIT

      CONCATENATE 'CONVERSION_EXIT_' IV_CONVEXIT LV_TYPE INTO LV_FUNCNAME.

    ELSEIF IV_DBFIELD IS NOT INITIAL.  "USE VALUE FIELD ELEMENT INFO.

      SELECT SINGLE CONVEXIT INTO @DATA(LV_CONVEXIT)
        FROM DD04L
       WHERE ROLLNAME = @IV_DBFIELD
         AND AS4LOCAL = @ZSCO0_A.

      IF LV_CONVEXIT IS NOT INITIAL.
        CONCATENATE 'CONVERSION_EXIT_' LV_CONVEXIT LV_TYPE INTO LV_FUNCNAME.
      ENDIF.

    ELSE.                              "USE VALUE OBJECT INFO.

      DATA(LO_STR)  = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( IV_INPUT ).
      DATA(LT_OBJT) = LO_STR->GET_DDIC_OBJECT( ).
      DATA(LS_OBJT) = LT_OBJT[ 1 ].
      IF LS_OBJT-CONVEXIT IS NOT INITIAL.
        CONCATENATE 'CONVERSION_EXIT_' LS_OBJT-CONVEXIT LV_TYPE INTO LV_FUNCNAME.
      ENDIF.
    ENDIF.

    CHECK LV_FUNCNAME IS NOT INITIAL.

*-- CHECK VALID FUNCTION
    CALL FUNCTION 'OM_FUNC_MODULE_EXIST'
      EXPORTING
        FUNCTION_MODULE = LV_FUNCNAME
      EXCEPTIONS
        NOT_EXISTENT    = 1
        OTHERS          = 2.

    IF SY-SUBRC IS INITIAL.

*-- CALL FUNCTION
      CALL FUNCTION LV_FUNCNAME
        EXPORTING
          INPUT     = IV_INPUT
        IMPORTING
          OUTPUT    = EV_OUTPUT
        EXCEPTIONS
          NOT_FOUND = 1
          OTHER     = 2.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CONVERT_CELL_TO_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_CELLS                       TYPE        YPJO_XXL_DW_T
* | [--->] IT_DFIES                       TYPE        DDFIELDS
* | [<---] EV_CONV_ROW                    TYPE        INT4
* | [<-->] CT_CONV_TABLE                  TYPE        STANDARD TABLE
* | [<-()] CT_RETURN                      TYPE        BAPIRET2_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CONVERT_CELL_TO_TABLE.

    DATA: LT_CELLS    TYPE YPJO_XXL_DW_T,
          LS_DFIES    TYPE DFIES,
          LS_CELLS    TYPE YPJO_XXL_DW_S,
          LS_RETURN   TYPE BAPIRET2,
          LO_DREF     TYPE REF TO DATA,
          LO_SREF     TYPE REF TO DATA,
          LR_TABDESCR TYPE REF TO CL_ABAP_STRUCTDESCR.

    FIELD-SYMBOLS: <LT_ITAB> TYPE STANDARD TABLE,
                   <LS_ITAB> TYPE ANY.

*-- ASSIGN TARGET TABLE
    ASSIGN CT_CONV_TABLE[] TO <LT_ITAB>.
    IF <LT_ITAB> IS NOT ASSIGNED.
      EXIT.
    ELSE.
      CREATE DATA LO_SREF LIKE LINE OF <LT_ITAB>.
      ASSIGN LO_SREF->* TO <LS_ITAB>.
    ENDIF.

    LT_CELLS[] = IT_CELLS[].

    DATA(LV_TOTAL) = LINES( LT_CELLS ).

    LOOP AT LT_CELLS INTO LS_CELLS.
      DATA(LV_TABIX) = SY-TABIX.

      AT NEW ROW.
        ADD 1 TO MV_ROWNO.
      ENDAT.

      READ TABLE IT_DFIES INTO LS_DFIES INDEX LS_CELLS-COL.

      ASSIGN COMPONENT LS_DFIES-FIELDNAME OF STRUCTURE <LS_ITAB> TO FIELD-SYMBOL(<LV_VALUE>).

      IF <LV_VALUE> IS ASSIGNED AND LS_CELLS-VALUE IS NOT INITIAL.

        LS_RETURN = ZCL_SCO_COMM=>CORRECT_FORMAT_CONVERSION(
                                  EXPORTING IV_SOURCE = LS_CELLS-VALUE
                                            IS_DESC   = LS_DFIES
                                  IMPORTING EV_TARGET = <LV_VALUE> ).

      ENDIF.

      IF LS_RETURN IS NOT INITIAL.
        LS_RETURN-TYPE = ZSCO0_E.
        LS_RETURN-ROW  = MV_ROWNO.
        CONCATENATE `| COLUMN NO. : ` LS_CELLS-COL ` | COLUMN VALUE : ` LS_CELLS-VALUE
               INTO LS_RETURN-MESSAGE_V2.

        APPEND LS_RETURN TO CT_RETURN.
        CLEAR LS_RETURN.
      ENDIF.

      AT END OF ROW.

        IF <LS_ITAB> IS NOT INITIAL.

          ZCL_SCO_COMM=>SHOW_PROGRESS_PERCENTAGE(
            IV_TOTAL_LINES = LV_TOTAL
            IV_COUNT       = LV_TABIX
            IV_TEXT        = CONV #( `CONVERSION IN PROGRESS... ` ) ).

          CALL METHOD ZCL_SCO_COMM=>CONVERT_DECIMALS_FOR_CURRENCY
            EXPORTING
              IT_DFIES = IT_DFIES
            CHANGING
              CS_ITEM  = <LS_ITAB>.

          APPEND <LS_ITAB> TO <LT_ITAB>.

        ENDIF.

        CLEAR <LS_ITAB>.

      ENDAT.

      EV_CONV_ROW = LS_CELLS-ROW.
      CLEAR LS_CELLS.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CONVERT_DECIMALS_FOR_CURRENCY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DFIES                       TYPE        DDFIELDS
* | [<-->] CS_ITEM                        TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CONVERT_DECIMALS_FOR_CURRENCY.

    STATICS: LT_TAB_DFIES TYPE DDFIELDS,
             LS_CURR      TYPE BAPI1090_1.

    DATA: LS_T001  TYPE T001,
          LS_DFIES TYPE DFIES,
          LV_WAERS TYPE WAERS.

    CONSTANTS LC_CUKY TYPE CHAR4 VALUE 'CUKY'.

*-- 1. CHECK CURRENCY FIELD
    READ TABLE IT_DFIES INTO LS_DFIES WITH KEY DATATYPE = LC_CUKY.
    IF SY-SUBRC IS INITIAL.
      ASSIGN COMPONENT LS_DFIES-FIELDNAME OF STRUCTURE CS_ITEM TO FIELD-SYMBOL(<LV_CUKY>).
      IF <LV_CUKY> IS ASSIGNED.
        LV_WAERS = <LV_CUKY>.
      ENDIF.
      CLEAR LS_DFIES.
    ENDIF.

    LOOP AT IT_DFIES INTO LS_DFIES.

      CASE LS_DFIES-DATATYPE.

*-- 2. CHECK REF. CURRENCY KEY
        WHEN 'CURR'.
          IF LV_WAERS IS INITIAL.
            IF LT_TAB_DFIES IS INITIAL.
              CALL FUNCTION 'LOAN_CHECK_STRUCTURE_INIT'
                EXPORTING
                  I_STRUCTURE_TABNAME   = LS_DFIES-TABNAME
                TABLES
                  IT_DFIES              = LT_TAB_DFIES
                EXCEPTIONS
                  FOREIGN_KEY_NOT_FOUND = 1
                  ERROR_FOUND           = 2
                  OTHERS                = 3.

              SORT LT_TAB_DFIES BY FIELDNAME.

            ENDIF.

            READ TABLE LT_TAB_DFIES INTO DATA(LS_TAB_DFIES) WITH KEY FIELDNAME = LS_DFIES-FIELDNAME BINARY SEARCH.
            IF LS_TAB_DFIES-REFFIELD IS NOT INITIAL.
              ASSIGN COMPONENT LS_TAB_DFIES-REFFIELD OF STRUCTURE CS_ITEM TO FIELD-SYMBOL(<LV_REF_WAERS>).
              IF <LV_REF_WAERS> IS ASSIGNED.
                LV_WAERS = <LV_REF_WAERS>.
              ENDIF.
            ENDIF.
          ENDIF.

*-- 3. COMPANY CODE CURRENCY
          IF LV_WAERS IS INITIAL.
            ASSIGN COMPONENT 'BUKRS' OF STRUCTURE CS_ITEM TO FIELD-SYMBOL(<LV_BUKRS>).
            IF <LV_BUKRS> IS ASSIGNED.
              CALL FUNCTION 'FI_COMPANY_CODE_DATA'
                EXPORTING
                  I_BUKRS      = <LV_BUKRS>
                IMPORTING
                  E_T001       = LS_T001
                EXCEPTIONS
                  SYSTEM_ERROR = 1
                  OTHERS       = 2.

              LV_WAERS = LS_T001-WAERS.
            ENDIF.
          ENDIF.

*-- GET CURRENCY DECIMAL PLACE
          IF LV_WAERS IS INITIAL.
            LS_CURR-CURDECIMALS = 2.
          ELSE.
            IF LV_WAERS <> LS_CURR-CURRENCY.
              LS_CURR-CURRENCY = LV_WAERS.
              SELECT SINGLE CURRDEC
                FROM TCURX
                INTO LS_CURR-CURDECIMALS
               WHERE CURRKEY = LV_WAERS.
              IF SY-SUBRC <> 0.
                LS_CURR-CURDECIMALS = 2.
              ENDIF.
            ENDIF.
          ENDIF.

*-- CONVERT DECIMAL PLACE
          ASSIGN COMPONENT LS_DFIES-FIELDNAME OF STRUCTURE CS_ITEM TO FIELD-SYMBOL(<LV_VALUE>).
          IF <LV_VALUE> IS ASSIGNED.
            DESCRIBE FIELD <LV_VALUE> DECIMALS DATA(LV_DECIMALS).
            LV_DECIMALS = LV_DECIMALS = LS_CURR-CURDECIMALS.
            IF LV_DECIMALS <> 0.
              <LV_VALUE> = <LV_VALUE> / ( 10 ** LV_DECIMALS ).
            ENDIF.
          ENDIF.

      ENDCASE.

      CLEAR LS_DFIES.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CONVERT_STR_TO_LINE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_STR                         TYPE        ANY
* | [--->] IT_DDFIELDS                    TYPE        DDFIELDS
* | [<-->] CS_ROW_DATA                    TYPE        USMD_CHARLINE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CONVERT_STR_TO_LINE.

    DATA: LS_DFIES TYPE DFIES,
          LV_VALUE TYPE TVARV_VAL.

*-- CONVERTING COLUMNS TO LINE
    LOOP AT IT_DDFIELDS INTO LS_DFIES.
      IF SY-TABIX <> 1.
        DATA(LV_TAB) = CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
      ENDIF.

      ASSIGN COMPONENT LS_DFIES-FIELDNAME OF STRUCTURE IS_STR TO FIELD-SYMBOL(<FS_VALUE>).
      IF <FS_VALUE> IS ASSIGNED.

        CASE LS_DFIES-INTTYPE.
          WHEN 'C' OR 'N' OR 'D' OR 'T'.    "CHAR. TYPE
            LV_VALUE = <FS_VALUE>.
            CONDENSE LV_VALUE.
          WHEN 'P'.

            CASE LS_DFIES-DATATYPE.
              WHEN 'CURR'.                  "CONVERT CURRENCY AMOUNT
                ASSIGN COMPONENT 'WAERS' OF STRUCTURE IS_STR TO FIELD-SYMBOL(<FS_WAERS>).
                IF <FS_WAERS> IS ASSIGNED.
                  DATA: LV_AMT(20).
                  WRITE <FS_VALUE> TO LV_AMT CURRENCY <FS_WAERS>.
                  IF SY-SUBRC IS INITIAL.
                    LV_VALUE = LV_AMT.
                  ENDIF.
                ELSE.                       "AMOUNT TYPE
                  LV_VALUE = <FS_VALUE>.
                ENDIF.

                IF <FS_VALUE> < 0.          "CONVERT SIGN
                  CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
                    CHANGING
                      VALUE = LV_VALUE.
                ENDIF.

              WHEN 'QUAN'.                  "CONVERT UNIT QTY.

                ASSIGN COMPONENT 'MEINS' OF STRUCTURE IS_STR TO FIELD-SYMBOL(<FS_MEINS>).
                IF <FS_MEINS> IS ASSIGNED.
                  DATA: LV_QTY(20).
                  WRITE <FS_VALUE> TO LV_QTY UNIT <FS_MEINS>.
                  IF SY-SUBRC IS INITIAL.
                    LV_VALUE = LV_QTY.
                  ENDIF.
                ELSE.                       "AMOUNT TYPE
                  LV_VALUE = <FS_VALUE>.
                ENDIF.

                IF <FS_VALUE> < 0.          "CONVERT SIGN
                  CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
                    CHANGING
                      VALUE = LV_VALUE.
                ENDIF.

              WHEN OTHERS.
                LV_VALUE = CONV STRING( <FS_VALUE> ).
            ENDCASE.

            CONDENSE LV_VALUE NO-GAPS.

          WHEN OTHERS.

            LV_VALUE = CONV STRING( <FS_VALUE> ).
            CONDENSE LV_VALUE.

        ENDCASE.

        IF LS_DFIES-CONVEXIT IS NOT INITIAL.   "CONVERSION EXIT
          CALL METHOD ZCL_SCO_COMM=>CONVERSION_EXIT_VALUE
            EXPORTING
              IV_INPUT    = LV_VALUE
              IV_CONVEXIT = LS_DFIES-CONVEXIT
            IMPORTING
              EV_OUTPUT   = LV_VALUE.
        ENDIF.

        CS_ROW_DATA = CS_ROW_DATA && LV_TAB && LV_VALUE.

        CLEAR LV_VALUE.

      ENDIF.

      CLEAR LS_DFIES.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CONV_ITAB_TO_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_ITAB                        TYPE        STANDARD TABLE
* | [--->] IV_WITH                        TYPE        STRING(OPTIONAL)
* | [<-()] RV_VALUE                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CONV_ITAB_TO_DATA.

    LOOP AT IT_ITAB ASSIGNING FIELD-SYMBOL(<FS>).
      RV_VALUE = RV_VALUE && IV_WITH && <FS>.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CORRECT_FORMAT_CONVERSION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SOURCE                      TYPE        TEXT4096
* | [--->] IS_DESC                        TYPE        DFIES
* | [<---] EV_TARGET                      TYPE        ANY
* | [<-()] RS_RETURN                      TYPE        BAPIRET2
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CORRECT_FORMAT_CONVERSION.

    DATA: LV_FIELD_TYPE      TYPE C,
          LV_DECIMALS        TYPE I,
          LV_DECIMALS_TARGET TYPE I,
          LV_STRLEN          TYPE I,
          LV_LAST_DECIMAL    TYPE I,
          LV_HLPVZ           TYPE I.

    FIELD-SYMBOLS: <LV_TYPE_X> TYPE TEXT4096.

    CONSTANTS: LC_PTEXT(13)       TYPE C VALUE '1234567890 -+',
               LC_DARL_NUMBER(12) TYPE C VALUE '1234567890 ',
               LC_MINUS(1)        TYPE C VALUE '-',
               LC_NULL(8)         TYPE C VALUE '00:00:00'.

    DEFINE _PERPARE_NUMBER.

      CLEAR SY-SUBRC.
      WHILE SY-SUBRC = 0.

        IF &1 = '.'.
          IF IV_SOURCE CA &1.
            IF SY-FDPOS > LV_LAST_DECIMAL.
              LV_LAST_DECIMAL = SY-FDPOS + 1.
            ENDIF.
          ENDIF.
        ENDIF.

        REPLACE &1 WITH SPACE INTO IV_SOURCE.

      ENDWHILE.

    END-OF-DEFINITION.

    DEFINE _RETURN.
      IF SY-SUBRC IS NOT INITIAL.
        RS_RETURN = VALUE #( TYPE          = &1
                             ID            = &2
                             NUMBER        = &3
                             MESSAGE_V1    = &4
                             MESSAGE_V2    = &5
                             MESSAGE_V3    = &6
                             MESSAGE_V4    = &7 ).
        ENDIF.
    END-OF-DEFINITION.

    CHECK IV_SOURCE IS NOT INITIAL.

    IF IS_DESC IS INITIAL.
      DESCRIBE FIELD EV_TARGET TYPE LV_FIELD_TYPE.
    ELSE.
      LV_FIELD_TYPE = IS_DESC-INTTYPE.
    ENDIF.

    TRY.
        CASE LV_FIELD_TYPE.

*-- CHAR. TYPE
          WHEN 'C'.

            EV_TARGET = IV_SOURCE.
            IF IS_DESC-LOWERCASE EQ SPACE.
              EV_TARGET = |{ EV_TARGET CASE = UPPER }|.
            ENDIF.

*-- DATE TYPE
          WHEN 'D'.

            REPLACE ALL OCCURRENCES OF '.' IN IV_SOURCE WITH SPACE.
            REPLACE ALL OCCURRENCES OF '/' IN IV_SOURCE WITH SPACE.
            REPLACE ALL OCCURRENCES OF '-' IN IV_SOURCE WITH SPACE.
            CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
              EXPORTING
                DATE_EXTERNAL            = IV_SOURCE
                ACCEPT_INITIAL_DATE      = ABAP_TRUE
              IMPORTING
                DATE_INTERNAL            = EV_TARGET
              EXCEPTIONS
                DATE_EXTERNAL_IS_INVALID = 1
                OTHERS                   = 2.

            _RETURN SY-MSGTY SY-MSGID SY-MSGNO SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

*-- TIME TYPE
          WHEN 'T'.

            IF IV_SOURCE IS NOT INITIAL AND IV_SOURCE <> LC_NULL.

              CALL FUNCTION 'CONVERT_TIME_INPUT'
                EXPORTING
                  INPUT                     = IV_SOURCE
                IMPORTING
                  OUTPUT                    = EV_TARGET
                EXCEPTIONS
                  PLAUSIBILITY_CHECK_FAILED = 1
                  WRONG_FORMAT_IN_INPUT     = 2
                  OTHERS                    = 3.

              _RETURN SY-MSGTY SY-MSGID SY-MSGNO SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

            ENDIF.

*-- TYPE X
          WHEN 'X'.

            ASSIGN IV_SOURCE TO <LV_TYPE_X>.
            IF SY-SUBRC <> 0.
              _RETURN 'E' '0K' '000' 'NUMERIC TYPE ERROR' '' '' ''.
            ENDIF.

            EV_TARGET = <LV_TYPE_X>.

*-- NUMERIC TYPE
          WHEN 'N'.

            REPLACE ALL OCCURRENCES OF '.' IN IV_SOURCE WITH SPACE.
            CONDENSE IV_SOURCE NO-GAPS.
            IF IV_SOURCE CN LC_DARL_NUMBER.
              _RETURN 'E' '0K' '000' 'NUMERIC TYPE ERROR' '' '' ''.
            ELSE.
              EV_TARGET = IV_SOURCE.
            ENDIF.

*-- INTEGER TYPE
          WHEN 'I'.

            DESCRIBE FIELD EV_TARGET DECIMALS LV_DECIMALS_TARGET.

            LV_STRLEN = STRLEN( IV_SOURCE ).
            _PERPARE_NUMBER : '.', ',', ';', '/'.

            IF LV_LAST_DECIMAL IS NOT INITIAL.
              LV_HLPVZ = LV_STRLEN - 1.
              IF IV_SOURCE+LV_HLPVZ(1) = LC_MINUS.
                LV_DECIMALS = LV_STRLEN - LV_LAST_DECIMAL - 1.
              ELSE.
                LV_DECIMALS = LV_STRLEN - LV_LAST_DECIMAL.
              ENDIF.
            ENDIF.

            CONDENSE IV_SOURCE NO-GAPS.

            IF STRLEN( IV_SOURCE ) > IS_DESC-LENG.
              _RETURN 'E' '0K' '000' 'FIELD LENGTH OVERFLOW' '' '' ''.
            ELSEIF IV_SOURCE CN LC_DARL_NUMBER.
              _RETURN 'E' '0K' '000' 'INTEGER TYPE ERROR' '' '' ''.
            ELSE.
              LV_DECIMALS_TARGET = LV_DECIMALS_TARGET - LV_DECIMALS.
              EV_TARGET = IV_SOURCE * ( 10 ** ( LV_DECIMALS_TARGET ) ).
            ENDIF.

*-- AMOUNT/QTY TYPE
          WHEN 'P'.

            IF IV_SOURCE(1) = LC_MINUS.
              DATA LV_MINUS TYPE XFELD.
              LV_MINUS = ABAP_TRUE.
              SHIFT IV_SOURCE BY 1 PLACES LEFT.
            ENDIF.

            IF IV_SOURCE EQ ' -'.
              CLEAR IV_SOURCE.
            ENDIF.

            DESCRIBE FIELD EV_TARGET DECIMALS LV_DECIMALS_TARGET.

            LV_STRLEN = STRLEN( IV_SOURCE ).
            _PERPARE_NUMBER : '.', ',', ';', '/'.

            IF LV_LAST_DECIMAL IS NOT INITIAL.
              LV_HLPVZ = LV_STRLEN - 1.
              IF IV_SOURCE+LV_HLPVZ(1) = LC_MINUS.
                LV_DECIMALS = LV_STRLEN - LV_LAST_DECIMAL - 1.
              ELSE.
                LV_DECIMALS = LV_STRLEN - LV_LAST_DECIMAL.
              ENDIF.
            ENDIF.

            CONDENSE IV_SOURCE NO-GAPS.

            IF STRLEN( IV_SOURCE ) > IS_DESC-LENG.
              _RETURN 'E' '0K' '000' 'FIELD LENGTH OVERFLOW' '' '' ''.
              RETURN.
            ENDIF.

            DESCRIBE FIELD EV_TARGET LENGTH DATA(LV_LEN_TARGET) IN BYTE MODE.
            LV_LEN_TARGET = ( LV_LEN_TARGET * 2 ) - 1.
            DATA(LV_LEN_SOURCE) = STRLEN( IV_SOURCE ).
            IF LV_LEN_SOURCE > LV_LEN_TARGET.
              LV_DECIMALS_TARGET = LV_DECIMALS_TARGET - LV_LEN_TARGET + LV_LEN_SOURCE.
              IV_SOURCE = IV_SOURCE(LV_LEN_TARGET).
            ENDIF.

            IF IV_SOURCE CN LC_PTEXT.
              CASE IS_DESC-DATATYPE.
                WHEN 'CURR'. _RETURN 'E' '0K' '000' 'CURRENCY TYPE ERROR' '' '' ''.
                WHEN 'QUAN'. _RETURN 'E' '0K' '000' 'QUANTITY TYPE ERROR' '' '' ''.
                WHEN OTHERS. _RETURN 'E' '0K' '000' 'ONLY NUMBERS CAN BE ENTERED' '' '' ''.
              ENDCASE.
            ELSE.
              EV_TARGET = IV_SOURCE / ( 10 ** ( LV_DECIMALS_TARGET ) ).

              LV_DECIMALS_TARGET = LV_DECIMALS_TARGET - LV_DECIMALS.
              EV_TARGET = EV_TARGET * ( 10 ** ( LV_DECIMALS_TARGET ) ).
            ENDIF.

            IF LV_MINUS IS NOT INITIAL.
              EV_TARGET = EV_TARGET * -1.
            ENDIF.

*-- FLIP TYPE
          WHEN 'F'.

            CALL FUNCTION 'CHAR_FLTP_CONVERSION'
              EXPORTING
                STRING             = IV_SOURCE
              IMPORTING
                FLSTR              = EV_TARGET
              EXCEPTIONS
                EXPONENT_TOO_BIG   = 1
                EXPONENT_TOO_SMALL = 2
                STRING_NOT_FLTP    = 3
                TOO_MANY_DECIM     = 4
                OTHERS             = 5.

            _RETURN SY-MSGTY SY-MSGID SY-MSGNO SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

        ENDCASE.

        IF RS_RETURN IS INITIAL AND STRLEN( IV_SOURCE ) > IS_DESC-LENG.
*              WRITE 'ERROR'.
*              _RETURN 'E' '0K' '000' 'FIELD LENGTH OVERFLOW' '' '' ''.
        ENDIF.

*-- DYNAMIC CONVERSION EXIT
        IF IS_DESC-CONVEXIT IS NOT INITIAL AND RS_RETURN IS INITIAL.

          CALL METHOD ZCL_COC_COMM=>CONVERSION_EXIT_VALUE
            EXPORTING
              IV_INPUT        = EV_TARGET
              IV_CONVEXIT     = IS_DESC-CONVEXIT
              IV_CONVERT_TYPE = ZSCO0_I
            IMPORTING
              EV_OUTPUT       = EV_TARGET.

        ENDIF.

      CATCH CX_ROOT INTO MO_ROOT.
        DATA(LS_RETURN) = ZCL_COC_COMM=>MESSAGE_HEADLING( MO_ROOT->GET_TEXT( ) ).
        RS_RETURN = VALUE #( BASE RS_RETURN
                                  MESSAGE_V1 = LS_RETURN-MESSAGE_V1
                                  MESSAGE_V2 = LS_RETURN-MESSAGE_V2
                                  MESSAGE_V3 = LS_RETURN-MESSAGE_V3
                                  MESSAGE_V4 = LS_RETURN-MESSAGE_V4 ).
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>CREATE_TOP_OF_PAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_PARENTS                     TYPE REF TO CL_GUI_CONTAINER
* | [--->] IO_DOCU                        TYPE REF TO CL_DD_DOCUMENT
* | [--->] IV_REPID                       TYPE        REPID (DEFAULT =SY-CPROG)
* | [--->] IT_EXCLU                       TYPE        MGV_LAMA_RSLDBSELOP_TT(OPTIONAL)
* | [--->] IT_INCLU                       TYPE        TY_HEADINFO_T(OPTIONAL)
* | [<-->] CO_SPLITTER                    TYPE REF TO CL_GUI_SPLITTER_CONTAINER
* | [<-()] RV_SUBRC                       TYPE        SUBRC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CREATE_TOP_OF_PAGE.
*----------------------------------------------------------------------*
* DESCRIPTION      : TOP OF PAGE 자동 생성
* TECH. SCRIPT     : SCREEN 1000의 값을 읽어서 TOP OF PAGE를 자동 생성 한다.
*----------------------------------------------------------------------*
* IO_PARENTS  -> 상위 CONTAINTER
* IO_DOCU     -> CL_DD_DOCUMENT
* CO_SPLITTER -> CL_GUI_SPLITTER_CONTAINER
* IV_REPID    -> 프로그램 명
* IT_EXCLU    -> 라인을 삭제하고 싶을 경우, 변수명을 넣어준다.
*    DATA(LT_EXCLU) = VALUE MGV_LAMA_RSLDBSELOP_TT( NAME = 'P_PATH' ) ).
* IT_INCLU    -> 라인을 추가하고 싶을 경우, 라인을 추가 해 준다.
*    DATA LT_INCLU TYPE ZCL_SCO_COMM=>TY_HEADINFO_T.
*    LT_INCLU = VALUE #( ( ICON = ICON_LED_INACTIVE
*                          SEQ  = 1 "라인을 안 넣을 경우 마지막으로 등록 됨.
*                          PARA = 'TEST PARA'
*                          VALU = 'TEST VALUE'
*                          TEXT = 'TEST TEXT' ) ).
*----------------------------------------------------------------------*

    DATA: LS_INFO    TYPE TY_HEADINFO_S,
          LT_INFO    LIKE TABLE OF LS_INFO,
          LS_INCL    TYPE TY_HEADINFO_S,
          LT_INCL    LIKE TABLE OF LS_INCL,
          LV_LENG    TYPE DDLENG,
          LS_SELTEXT TYPE TEXTPOOL,
          LT_SELTEXT LIKE TABLE OF LS_SELTEXT,
          LS_SELTAB  TYPE RSPARAMS,
          LT_SELTAB  LIKE TABLE OF LS_SELTAB,
          LS_SELINFO TYPE RSEL_INFO,
          LT_SELINFO LIKE TABLE OF LS_SELINFO,
          LS_EXCLU   TYPE RSLDBSELOP,
          LT_EXCLU   LIKE TABLE OF LS_EXCLU,
          LV_SUBRC   TYPE I,
          LV_TABIX   TYPE SY-TABIX.

    IF IV_REPID IS INITIAL.
      RV_SUBRC = 1. RETURN.
    ENDIF.

    IF IO_DOCU IS INITIAL.
      RV_SUBRC = 2. RETURN.
    ENDIF.

    IF IO_PARENTS IS INITIAL.
      RV_SUBRC = 3. RETURN.
    ENDIF.

    LT_EXCLU = IT_EXCLU.
    LT_INCL  = IT_INCLU.

    TRY.

        "1. GET PARAMETER INFO
        LV_SUBRC = ZCL_SCO_COMM=>GET_PGM_PARAMETER( IMPORTING ET_SELINFO = LT_SELINFO
                                                              ET_SELTAB  = LT_SELTAB
                                                              ET_SELTEXT = LT_SELTEXT ).

        IF LV_SUBRC <> 0.
          RV_SUBRC = LV_SUBRC.
          RETURN.
        ENDIF.

        "2. MAKE HEADER INFO
        SORT LT_SELTEXT BY KEY.
        SORT LT_EXCLU   BY NAME.
        SORT LT_SELTAB  BY SELNAME.

        LOOP AT LT_SELINFO INTO LS_SELINFO.

          CLEAR: LS_INFO,
                 LS_EXCLU.

          "CHECK EXCLUDING PARAMETER
          READ TABLE LT_EXCLU INTO LS_EXCLU WITH KEY NAME = LS_SELINFO-NAME
                                                     BINARY SEARCH.
          IF SY-SUBRC = 0.
            CONTINUE.
          ENDIF.

          "PARAMETER TEXT
          CLEAR: LS_SELTEXT.
          READ TABLE LT_SELTEXT INTO LS_SELTEXT WITH KEY KEY = LS_SELINFO-NAME
                                                         BINARY SEARCH.
          IF SY-SUBRC = 0.
            LS_INFO-PARA = LS_SELTEXT-ENTRY.
          ELSE.
            CONTINUE.
          ENDIF.

          "PARAMETER VALUE
          CLEAR: LS_SELTAB.
          READ TABLE LT_SELTAB INTO LS_SELTAB  WITH KEY SELNAME = LS_SELINFO-NAME
                                                        BINARY SEARCH.
          IF SY-SUBRC = 0.
            FIND ALL OCCURRENCES OF '-' IN LS_SELINFO-DBFIELD
                                           MATCH OFFSET DATA(LV_MOFF)
                                           MATCH LENGTH DATA(LV_MLEN).
            IF SY-SUBRC = 0.
              DATA(LV_LEN) = LV_MOFF + LV_MLEN.

              SELECT SINGLE ROLLNAME, LENG
                INTO (@LS_SELINFO-DBFIELD, @LV_LENG)
                FROM DD03L
               WHERE TABNAME   = @LS_SELINFO-DBFIELD(LV_MOFF)
                 AND FIELDNAME = @LS_SELINFO-DBFIELD+LV_LEN
                 AND AS4LOCAL  = @ZSCO0_A.
            ENDIF.


            IF   LS_SELTAB-KIND   = ZSCO0_P OR
               ( LS_SELTAB-KIND   = ZSCO0_S AND LS_SELTAB-OPTION = ZSCO0_EQ ).

              LS_INFO-VALU = LS_SELTAB-LOW.

              DATA(LV_TOT) = REDUCE I( INIT S = 0 FOR <TOT> IN LT_SELTAB
                                                  NEXT S = S + COND #( WHEN <TOT>-SELNAME = LS_SELINFO-NAME THEN 1 ) ).

              IF LV_TOT > 1.
                LS_INFO-VALU = LS_INFO-VALU && '...'.
              ENDIF.

            ELSEIF LS_SELTAB-KIND   = ZSCO0_S AND
                   LS_SELTAB-OPTION = ZSCO0_BT.

              LS_INFO-VALU = LS_SELTAB-LOW && '~' && LS_SELTAB-HIGH.
              
              LV_TOT = REDUCE I( INIT S = 0 FOR <TOT> IN LT_SELTAB
                                            NEXT S = S + COND #( WHEN <TOT>-SELNAME = LS_SELINFO-NAME THEN 1 ) ).
                                            
              IF LV_TOT > 1.
              	LS_NFO-VALU = LS_INFO-VALU && '....'.
              ENDIF.

            ENDIF.

            IF LS_INFO-VALU IS INITIAL.
              CONTINUE.
            ENDIF.

          ELSE.
            CONTINUE.
          ENDIF.

          "PARAMETER TEXT
          LS_INFO-TEXT = CONV #( ZCL_SCO_COMM=>GET_TEXT_ELEMENT( IV_FIELD = CONV #( LS_SELINFO-NAME+2(6) )
                                                                 IV_VALUE = LS_INFO-VALU ) ).

          "SET HEADER INDEX
          ADD 1 TO LV_TABIX.
          LS_INFO-SEQ = LV_TABIX.

          APPEND LS_INFO TO LT_INFO.

        ENDLOOP.

        "INDLUDE DATE
        IF LT_INCL IS NOT INITIAL.

          LOOP AT LT_INCL INTO LS_INCL.
            IF LS_INCL-SEQ IS INITIAL.
              LS_INCL-SEQ = LINES( LT_INFO ) + 1.
              APPEND LS_INCL TO LT_INFO.
            ELSE.
              INSERT LS_INCL INTO LT_INFO INDEX LS_INCL-SEQ.
            ENDIF.
          ENDLOOP.
        ENDIF.

        "TOP SPLITTER SET HEIGHT.
        IF CO_SPLITTER IS BOUND.
          DATA(LV_LINE_CNT) = LINES( LT_INFO ) * 2 + 3.
          CO_SPLITTER->SET_ROW_HEIGHT( ID = 1 HEIGHT = LV_LINE_CNT ) .
        ENDIF.

        "DISPLAY HEADER WITH CREATION BOX INFO
        CLEAR LV_SUBRC.
        LV_SUBRC = ZCL_SCO_COMM=>MAKE_TOP_OF_PAGE( IO_DOCU    = IO_DOCU
                                                   IO_PARENTS = IO_PARENTS
                                                   IT_INFO    = LT_INFO ).

        IF LV_SUBRC <> 0.
          RV_SUBRC = LV_SUBRC.
          RETURN.
        ENDIF.

      CATCH CX_ROOT INTO MO_ROOT.
        RV_SUBRC = 8.
        RETURN.

    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>DYNAMIC_SQL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SOURCE_TAB                  TYPE        STRING
* | [--->] IV_SQL_FIELDS                  TYPE        STRING
* | [--->] IV_SQL_COND                    TYPE        STRING(OPTIONAL)
* | [--->] IV_SQL_GROUPBY                 TYPE        STRING(OPTIONAL)
* | [--->] IV_SQL_HAVING                  TYPE        STRING(OPTIONAL)
* | [<---] ET_DATA                        TYPE        STANDARD TABLE
* | [<-()] RV_SUBRC                       TYPE        SY-SUBRC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD DYNAMIC_SQL.

    DATA: LR_RESULT TYPE REF TO CL_SQL_RESULT_SET,
          LR_STATMT TYPE REF TO CL_SQL_STATEMENT,
          LR_CONECT TYPE REF TO CL_SQL_CONNECTION,
          LR_EXCEPT TYPE REF TO CX_SQL_EXCEPTION,
          LR_DATA   TYPE REF TO DATA.

    DATA: LT_ADBC_FIELD TYPE TABLE OF ADBC_NAME,
          LS_RETURN     TYPE MSG_RETURN,
          LV_CFIELDS    TYPE STRING,
          LV_VFIELDS    TYPE STRING,
          LV_GROUPS     TYPE STRING VALUE 'GROUP BY',
          LV_CALC       TYPE C,
          LV_SQL        TYPE STRING.

    TRY.

        IF IV_SQL_GROUPBY IS NOT INITIAL.
          IV_SQL_GROUPBY = LV_GROUPS && ` ` && IV_SQL_GROUPBY.
        ENDIF.

*---------------------------------------------------------------------*
* MAKE SQL
*---------------------------------------------------------------------*
        CONCATENATE 'SELECT'
                    IV_SQL_FIELDS
                    'FROM'
                    IV_SOURCE_TAB
                    'WHERE'
                    IV_SQL_COND
                    IV_SQL_GROUPBY
                    IV_SQL_HAVING
               INTO LV_SQL SEPARATED BY SPACE.


*---------------------------------------------------------------------*
* EXECUTE SQL
*---------------------------------------------------------------------*
        TRY.

            GET REFERENCE OF ET_DATA INTO LR_DATA.
            "OPEN A CONNECTION TO A DATABASE
            LR_CONECT = CL_SQL_CONNECTION=>GET_CONNECTION( ).
            CREATE OBJECT LR_STATMT
              EXPORTING
                CON_REF = LR_CONECT.

            "EXECUTE SQL QUERY
            LR_RESULT = LR_STATMT->EXECUTE_QUERY( LV_SQL ).

            "GET RESULT COLUMN NAME
            DATA(LT_MATA) = LR_RESULT->GET_METADATA( ).
            IF SY-SUBRC IS INITIAL.
              LOOP AT LT_MATA ASSIGNING FIELD-SYMBOL(<LS_MATA>).
                APPEND <LS_MATA>-COLUMN_NAME TO LT_ADBC_FIELD.
              ENDLOOP.
            ENDIF.

            "CREATE REFERENCE TABLE
            IF LR_DATA IS NOT BOUND.
              DATA: LCL_STRUCTDESCR TYPE REF TO CL_ABAP_STRUCTDESCR.

              DATA(LR_SREF) = LR_RESULT->GET_STRUCT_REF( MD_TAB   = LT_MATA
                                                         P_STRICT = ABAP_TRUE ).

              DATA(LCL_TYPEDESCR) = CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( LR_SREF ).
              LCL_STRUCTDESCR ?= LCL_TYPEDESCR.
              DATA(LCL_TABLEDESCR) = CL_ABAP_TABLEDESCR=>CREATE( LCL_STRUCTDESCR ).

              CREATE DATA LR_DATA TYPE HANDLE LCL_TABLEDESCR.

            ENDIF.

            "ASSIGN RESULT DATA TO OUTPUT TABLE
            LR_RESULT->SET_PARAM_TABLE( ITAB_REF             = LR_DATA
                                        CORRESPONDING_FIELDS = LT_ADBC_FIELD ).

            "READ NEXT SET OF DATA RECORDS INTO THE INTERNAL TABLE
            LR_RESULT->NEXT_PACKAGE( ).

            LR_RESULT->CLOSE( ).
            LR_CONECT->CLOSE( ).

          CATCH CX_SQL_EXCEPTION INTO LR_EXCEPT.
            RV_SUBRC = 4.
            MESSAGE LR_EXCEPT->GET_TEXT( ) TYPE 'E'.

        ENDTRY.

      CATCH CX_ROOT INTO DATA(LO_ROOT).
        RV_SUBRC = 4.
        MESSAGE LO_ROOT->GET_TEXT( ) TYPE 'E'.

    ENDTRY.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>FILE_SAVE_DIALOG
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FILENAME                    TYPE        STRING
* | [--->] IV_FILE_FILTER                 TYPE        STRING(OPTIONAL)
* | [--->] IV_INITIAL_DIRECTORY           TYPE        STRING(OPTIONAL)
* | [<-()] RV_FULLPATH                    TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD FILE_SAVE_DIALOG.

    DATA: LV_TITLE       TYPE STRING,
          LV_LOC_FN      TYPE STRING,
          LV_LOC_DIR     TYPE STRING,
          LV_USER_ACTION TYPE I,
          LV_SUBRC       TYPE SY-SUBRC.

    DATA LV_MASK TYPE CHAR255.

*-- SET FIELD FILTER
    IF IV_FILE_FILTER IS INITIAL.
      DATA(LT_XML_CHOICE) = CL_SALV_EXPORT_XML_DIALOG=>GET_GUI_SPREADSHEET_FORMATS( ).
      DATA(LS_XML_CHOICE) = LT_XML_CHOICE[ XML_TYPE = '10' ].

      CALL METHOD CL_ALV_BDS=>CREATE_MASK_FOR_FILEFILTER
        EXPORTING
          I_FRONTEND          = LS_XML_CHOICE-FRONTEND
        IMPORTING
          E_DEFAULT_EXTENSION = DATA(LV_DEFAULT_EXTENSION)
        CHANGING
          C_MASK              = LV_MASK.

      IV_FILE_FILTER = LV_MASK.
    ENDIF.

*-- OPEN FILE SELECT DIALOG
    CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
      EXPORTING
        WINDOW_TITLE         = LV_TITLE
        DEFAULT_EXTENSION    = LV_DEFAULT_EXTENSION
        DEFAULT_FILE_NAME    = IV_FILENAME
        FILE_FILTER          = IV_FILE_FILTER
        INITIAL_DIRECTORY    = IV_INITIAL_DIRECTORY
      CHANGING
        FILENAME             = LV_LOC_FN
        PATH                 = LV_LOC_DIR
        FULLPATH             = RV_FULLPATH
        USER_ACTION          = LV_USER_ACTION
      EXCEPTIONS
        CNTL_ERROR           = 1
        ERROR_NO_GUI         = 2
        NOT_SUPPORTED_BY_GUI = 3
        OTHERS               = 4.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE E162(ALVHT).
      EXIT.
    ENDIF.

    IF LV_USER_ACTION = CL_GUI_FRONTEND_SERVICES=>ACTION_CANCEL.
      MESSAGE S161(ALVHT).
      EXIT.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BUKRS_FROM_KOKRS
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_BUKRS                        TYPE        BUKRS
* | [<-()] E_BTEXT                        TYPE        BUTXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_BUKRS_FROM_KOKRS.

    CHECK IV_KOKRS IS NOT INITIAL.
    
    "회사코드 = 관리회계영역과 1:1
    SELECT SINGLE BUKRS
      FROM TKA01
      INTO RV_BUKRS
     WHERE KOKRS = IV_KOKRS.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BUKRS_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_BUKRS                        TYPE        BUKRS
* | [<-()] E_BTEXT                        TYPE        BUTXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_BUKRS_TEXT.

    CHECK I_BUKRS IS NOT INITIAL.
    SELECT SINGLE BUTXT
      INTO E_BTEXT
      FROM T001
     WHERE BUKRS = I_BUKRS.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_CURTP_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_CURTP                        TYPE        FINS_CURTYPE
* | [<-()] E_NAME                         TYPE        FINS_CURTYPET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_CURTP_TEXT.

    CHECK I_CURTP IS NOT INITIAL.
    SELECT SINGLE NAME
      INTO E_NAME
      FROM FINSC_CURTYPET
     WHERE LANGU   = SY-LANGU
       AND CURTYPE = I_CURTP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_DOMAIN_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_DOMNAME                      TYPE        DD07L-DOMNAME
* | [--->] I_DOMVALUE                     TYPE        ANY
* | [--->] I_DOMVALUE                     TYPE        ANY
* | [<-()] E_DDTEXT                       TYPE        DDTEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_DOMAIN_TEXT.

		CLEAR: EV_SUBRC, RV_DDTEXT.
		
    SELECT SINGLE DOMVALUE_L
      FROM DD07L
     WHERE DOMNAME    = @IV_DOMNAME
       AND AS4LOCAL   = 'A'
       AND DOMVALUE_L = @IV_DOMVALUE
      INTO @DATA(LV_DOMNAME).
      
    IF SY-SUBRC = 0.
    	
	    SELECT SINGLE DDTEXT
	      FROM DD07T
	     WHERE DOMNAME    = @IV_DOMNAME
	       AND AS4LOCAL   = 'A'
	       AND DDLANGUAGE = @SY-LANGU
	       AND DOMVALUE_L = @IV_DOMVALUE.
	      INTO @RV_DDTEXT.

		ELSE.
		
			EV_SUBRC = 4.
			
		ENDIF.
		
		
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_DYNP_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FIELD                        TYPE        DYNPREAD-FIELDNAME
* | [--->] I_REPID                        TYPE        SYST-REPI2 (DEFAULT =SY-CPROG)
* | [--->] I_DYNNR                        TYPE        SYST-DYNNR (DEFAULT =SY-DYNNR)
* | [<-()] E_VALUE                        TYPE        DYNPREAD-FIELDVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_DYNP_VALUE.

    DATA(LV_FIELD) = I_FIELD.
    DATA(LV_REPID) = I_REPID.
    DATA(LV_DYNNR) = I_DYNNR.

    IF I_FIELD IS INITIAL.
      MESSAGE E000(0K) WITH 'FILL OUT REQUIRED PARAMETER FIELD' '(I_FIELD)'.
      RETURN.
    ENDIF.

    TRY.

        CALL FUNCTION 'GET_DYNP_VALUE'
          EXPORTING
            I_FIELD = LV_FIELD
            I_REPID = LV_REPID
            I_DYNNR = LV_DYNNR
          CHANGING
            O_VALUE = E_VALUE.

        IF E_VALUE IS INITIAL AND
           LV_REPID NE '1000'.

          "화면번호가 '1000'이 아닌 경우,
          "EXTENSION 기능으로 인해 값을 못 가져올 가능성이 있어
          "화면번호 '1000'을 다시 한번 조회

          DATA: LS_DYNPREAD TYPE DYNPREAD,
                LT_DYNPREAD TYPE TABLE OF DYNPREAD.

          LT_DYNPREAD = VALUE #( ( FIELDNAME = I_FIELD ) ).

          CALL FUNCTION 'DYNP_VALUES_READ'
            EXPORTING
              DYNAME               = LV_REPID
              DYNUMB               = '1000'
            TABLES
              DYNPFIELDS           = LT_DYNPREAD
            EXCEPTIONS
              INVALID_ABAPWORKAREA = 1
              INVALID_DYNPROFIELD  = 2
              INVALID_DYNPRONAME   = 3
              INVALID_DYNPRONUMMER = 4
              INVALID_REQUEST      = 5
              NO_FIELDDESCRIPTION  = 6
              INVALID_PARAMETER    = 7
              UNDEFIND_ERROR       = 8
              DOUBLE_CONVERSION    = 9
              STEPL_NOT_FOUND      = 10
              OTHERS               = 11.
          IF LT_DYNPREAD IS NOT INITIAL.

            READ TABLE LT_DYNPREAD INTO LS_DYNPREAD INDEX 1.
            E_VALUE = LS_DYNPREAD-FIELDVALUE.

          ENDIF.

        ENDIF.

      CATCH CX_ROOT INTO DATA(LX_ROOT).

        DATA(LV_ERROR_TEXT) = LX_ROOT->GET_TEXT( ).
        MESSAGE E000(0K) WITH LV_ERROR_TEXT.

    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_ELEHK_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ELEHK                        TYPE        CK_ELESMHK
* | [<-()] E_TXT                          TYPE        CK_TXSCH
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_ELEHK_TEXT.

    CHECK I_ELEHK IS NOT INITIAL.

    SELECT SINGLE TXSCH
      INTO E_TXT
      FROM TCKH5
     WHERE SPRAS = SY-LANGU
       AND ELEHK = I_ELEHK.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_ERKRS_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ERKRS                        TYPE        ERKRS
* | [<-()] E_TEXT                         TYPE        ERKRS_BZ
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_ERKRS_TEXT.

    SELECT SINGLE ERKRS_BZ
      INTO E_TEXT
      FROM TKEBT
     WHERE SPRAS = SY-LANGU
       AND ERKRS = I_ERKRS.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_FUNC_AREA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_KOKRS                       TYPE        KOKRS(OPTIONAL)
* | [<-()] RV_SETID                       TYPE        SETID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_FUNC_AREA.

    CHECK IV_KOSAR IS NOT INITIAL.

		SELECT SINGLE KOSAR, FUNC_AREA
		  FROM TKA05
		  INTO @DATA(LS_TKA05)
		 WHERE KOSAR = @IV_KOSAR.
		 
		"기능영역은 코스트센터 범주에 의해 결정
		IF SY-SUBRC = 0.
		  RV_FKBER = LS_TKA05-FUNC_AREA.
		ENDIF.
	
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_HIERARCHY_GROUP_CODE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_KOKRS                       TYPE        KOKRS(OPTIONAL)
* | [--->] IV_SETCLASS                    TYPE        SETCLASS
* | [--->] IV_GROUP_CODE                  TYPE        ANY
* | [<-()] RV_SETID                       TYPE        SETID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_HIERARCHY_GROUP_CODE.

    CHECK IV_GROUP_CODE IS NOT INITIAL.

    CALL FUNCTION 'G_SET_ENCRYPT_SETID'
      EXPORTING
        SETCLASS             = IV_SETCLASS
        SHORTNAME            = CONV SETID( IV_GROUP_CODE )
        KOKRS                = IV_KOKRS
      IMPORTING
        SETID                = RV_SETID
      EXCEPTIONS
        NO_CO_AREA_SPECIFIED = 1
        ILLEGAL_SETCLASS     = 2
        OTHERS               = 3.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_HIERARCHY_GROUP_LIST
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_KOKRS                       TYPE        KOKRS(OPTIONAL)
* | [--->] IV_SETCLASS                    TYPE        SETCLASS(OPTIONAL)
* | [--->] IV_SETID                       TYPE        SETID(OPTIONAL)
* | [--->] IV_GROUP_CODE                  TYPE        ANY(OPTIONAL)
* | [<---] ET_RANGE                       TYPE        STANDARD TABLE
* | [<---] ET_NODES                       TYPE        GSETH_NODE_TAB
* | [<---] ET_VALUES                       TYPE       GSETH_VAL_TAB
* | [<-()] RT_RANGEVALUE                  TYPE        DRF_T_SELOPT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_HIERARCHY_GROUP_LIST.
*---------------------------------------------------------------------*
* IV_SETID OR IV_GROUP_CODE 둘중에 하나만 입력하면 된다.
*---------------------------------------------------------------------*
* EX) ZCL_COC_COMM=>GET_HIERARCHY_GOUP_LIST( EXPORTING IV_SETCLASS   = '0109'
*                                                      IV SETID      = '0109SK00TEST_001'
*                                                      IV_GROUP_CODE = 'TEST_001'
*                                            IMPORTING ET_RANGE = LT_RACCT
*                                                      ET_NODES = LT_NODES
*                                                      ET_VALUES = LT_VALUES ).
*---------------------------------------------------------------------*

    DATA: LV_SETID     TYPE SETHIER-SETID,
          LV_INFO      TYPE GRPHINFO,
          LV_OVERWRITE TYPE SY-DATAR,
          LT_NODES     TYPE GSETH_NODE_TAB,
          LT_VALUES    TYPE GSETH_VAL_TAB,
          LS_RANGE     TYPE RSDSSELOPT,
          LT_D_VALUES  TYPE TABLE OF SETVALUES,
          LO_DREF      TYPE REF TO DATA,
          LO_SREF      TYPE REF TO DATA.

    FIELD-SYMBOLS <LT_RANGE> TYPE STANDARD TABLE.

    CONSTANTS LC_U TYPE C VALUE 'U'.

*- DEREFERENCE DYNAMIC EXPORT PARAMETER
    CREATE DATA LO_DREF LIKE ET_RANGE.
    ASSIGN LO_DREF->* TO <LT_RANGE>.
    CREATE DATA LO_SREF LIKE LINE OF <LT_RANGE>.
    ASSIGN LO_SREF->* TO FIELD-SYMBOL(<LS_RANGE>).
    DESCRIBE FIELD <LS_RANGE> TYPE DATA(LV_TYPE).

    "그룹이 들어 온 경우, 그룹 추출 메소드 호출
    IF IV_SETID IS INITIAL AND IV_GROUP_CODE IS NOT INITIAL.
      LV_SETID = ZCL_COC_COMM=>GET_HIERARCHY_GROUP_CODE( IV_KOKRS      = IV_KOKRS
                                                         IV_SETCLASS   = IV_SETCLASS
                                                         IV_GROUP_CODE = IV_GROUP_CODE ).

    ELSE.
      LV_SETID = IV_SETID.
    ENDIF.

    IF LV_SETID IS INITIAL.
      EXIT.
    ENDIF.

    CALL FUNCTION 'K_HIERARCHY_TABLES_READ'
      EXPORTING
        E_CLASS                     = IV_SETCLASS
        E_SETID                     = LV_SETID
        E_KOKRS                     = IV_KOKRS
      TABLES
        T_NODES                     = LT_NODES
        T_VALUES                    = LT_VALUES
      CHANGING
        C_INFO                      = LV_INFO
        C_OVERWRITE                 = LV_OVERWRITE
      EXCEPTIONS
        NO_CONTROLLING_AREA         = 1
        NO_CHART_OF_ACCOUNT         = 2
        DIFFERENT_CONTROLLING_AREAS = 3
        DIFFERENT_CHART_OF_ACCOUNTS = 4
        SET_NOT_FOUND               = 5
        ILLEGAL_FIELD_REPLACEMENT   = 6
        ILLEGAL_TABLE_REPLACEMENT   = 7
        FM_RAISE                    = 8
        CONVERT_ERROR               = 9
        NO_OVERWRITE_STANDARD_HIER  = 10
        NO_BUKRS_FOR_KOKRS          = 11
        OTHERS                      = 12.
    IF SY-SUBRC IS NOT INITIAL.
    	APPEND 'IEQNOT_FOUND' TO ET_RANGE.
    	APPEND 'IEQNOT_FOUND' TO RT_RANGEVALUE.
      EXIT.
    ENDIF.

    ET_NODES[] = LT_NODES.

*---------------------------------------------------------------------*
    IF LT_VALUES IS NOT INITIAL. "MAKE VALUE RANGE TABLE
*---------------------------------------------------------------------*

      LOOP AT LT_VALUES INTO DATA(LS_VALUES).

        IF LS_VALUES-VTO IS INITIAL OR LS_VALUES-VFROM = LS_VALUES-VTO.
          LS_RANGE = VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = LS_VALUES-VFROM ).
        ELSE.
          LS_RANGE = VALUE #( SIGN = 'I' OPTION = 'BT' LOW = LS_VALUES-VFROM HIGH = LS_VALUES-VTO ).
        ENDIF.

        APPEND LS_RANGE TO RT_RANGEVALUE.

        IF <LS_RANGE> IS ASSIGNED AND LV_TYPE = LC_U.
          MOVE-CORRESPONDING LS_RANGE TO <LS_RANGE>.
          APPEND <LS_RANGE> TO <LT_RANGE>.
          CLEAR <LS_RANGE>.
        ENDIF.

				"ET_VALUES 값 담기
				CASE IV_SETCLASS.
				  WHEN ZCOC_SETCLASS_CC.
				  
				    SELECT @LS_VALUES-SETID AS SETID,
				    	     A~KOSTL AS VFROM,
				    	     A~KOSTL AS VTO,
				    	     B~LTEXT AS DESCRIPT
				    	FROM CSKS AS A
				    	LEFT JOIN CSKT AS B ON B~KOKRS = A~KOKRS
				    		                 AND B~KOSTL = A~KOSTL
				    		                 AND B~DATBI = A~DATBI
				    		                 AND B~SPRAS = @SY-LANGU
				 APPENDING CORRESPONDING_FIELDS OF TABLE @ET_VALUES
				     WHERE A~KOKRS = @IV_KOKRS
				       AND A~KOSTL BETWEEN @LS_VALUES-VFROM AND @LS_VALUES-VTO.
				       
				  WHEN ZCOC_SETCLASS_CE.
				  
				    SELECT @LS_VALUES-SETID AS SETID,
				    	     A~KSTAR AS VFROM,
				    	     A~KSTAR AS VTO,
				    	     B~LTEXT AS DESCRIPT
				    	FROM CSKB AS A
				    	LEFT JOIN CSKU AS B ON B~KTOPL = @ZCOC_KTOPL
				    		                 AND B~KSTAR = A~KSTAR
				    		                 AND B~SPRAS = @SY-LANGU
				 APPENDING CORRESPONDING_FIELDS OF TABLE @ET_VALUES
				     WHERE A~KOKRS = @IV_KOKRS
				       AND A~KSTAR BETWEEN @LS_VALUES-VFROM AND @LS_VALUES-VTO.
				  
				ENDCASE.
				
        CLEAR: LS_VALUES, LS_RANGE.

      ENDLOOP.

      IF <LT_RANGE> IS ASSIGNED AND <LT_RANGE> IS NOT INITIAL.
        ET_RANGE = <LT_RANGE>.
      ENDIF.

			"Range 값이 NULL일 경우, dummy 값 지정
			IF ET_RANGE IS INITIAL.
			  APPEND 'IEQNOT_FOUND' TO ET_RANGE.
			ENDIF.
			IF RT_RANGEVALUE IS INITIAL.
			  RT_RANGEVALUE = VALUE #( ( SIGN = 'I' OPTION = 'EQ' LOW = 'NOT_FOUND' ) ).
			ENDIF.
			
      EXIT.

    ENDIF.

*---------------------------------------------------------------------*
    IF LT_NODES IS NOT INITIAL. "GET VARIATION GROUP VALUE
*---------------------------------------------------------------------*
      LOOP AT LT_NODES INTO DATA(LS_NODE).

        CALL FUNCTION 'G_SET_DYNAMIC_GET_VALUES'
          EXPORTING
            SETID                 = LS_NODE-SETID
          TABLES
            SET_VALUES            = LT_D_VALUES
          EXCEPTIONS
            SET_IS_NOT_DYNAMIC    = 1
            DYNAMIC_SET_NOT_FOUND = 2
            NO_CO_AREA_SPECIFIED  = 3
            OTHERS                = 4.

        IF LT_D_VALUES[] IS NOT INITIAL.

          LOOP AT LT_D_VALUES INTO DATA(LS_DVAL).

            IF LS_DVAL-TO IS INITIAL OR LS_DVAL-FROM = LS_DVAL-TO.
              LS_RANGE = VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = LS_DVAL-FROM ).
            ELSE.
              LS_RANGE = VALUE #( SIGN = 'I' OPTION = 'BT' LOW = LS_DVAL-FROM HIGH = LS_DVAL-TO ).
            ENDIF.

            APPEND LS_RANGE TO RT_RANGEVALUE.

            IF <LS_RANGE> IS ASSIGNED AND LV_TYPE = LC_U.
              MOVE-CORRESPONDING LS_RANGE TO <LS_RANGE>.
              APPEND <LS_RANGE> TO <LT_RANGE>.
              CLEAR <LS_RANGE>.
            ENDIF.

            CLEAR: LS_DVAL, LS_RANGE.

          ENDLOOP.

        ENDIF.

        CLEAR LS_NODE.

      ENDLOOP.

      IF <LT_RANGE> IS ASSIGNED AND <LT_RANGE> IS NOT INITIAL.
        ET_RANGE = <LT_RANGE>.
      ENDIF.

			"Range 값이 NULL일 경우, dummy 값 지정
			IF ET_RANGE IS INITIAL.
			  APPEND 'IEQNOT_FOUND' TO ET_RANGE.
			ENDIF.
			IF RT_RANGEVALUE IS INITIAL.
			  RT_RANGEVALUE = VALUE #( ( SIGN = 'I' OPTION = 'EQ' LOW = 'NOT_FOUND' ) ).
			ENDIF.

    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_KOKRS_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [<-()] E_KTEXT                        TYPE        BEZEI
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_KOKRS_TEXT.

    CHECK I_KOKRS IS NOT INITIAL.

    SELECT SINGLE BEZEI
      INTO E_KTEXT
      FROM TKA01
     WHERE KOKRS = I_KOKRS.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [<-()] E_KTEXT                        TYPE        BEZEI
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_BNAME_TEXT.

		CLEAR RV_BNAMET.
		
    CHECK IV_BNAME IS NOT INITIAL.

    SELECT SINGLE CONCAT( NAME_LAST, NAME_FIRST )
      FROM USER_ADDR
     WHERE BNAME = @IV_BNAME
      INTO @RV_BNAMET.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD DEL_IF_ITEM.

		"Get I/F info
		ZCL_COC_COMM=>GET_IF_INFO( IV_ZIFID = IV_ZIFID ).
		
		"데이터 유지 일자 확인
		CHECK ZCL_COC_COMM=>MS_IF_INFO-KEEPD > 0.
		
		"Select INFNO from Header TABLE
		DATA(LV_DATE) = CONV DATS( SY-DATUM - ZCL_COC_COMM=>MS_IF_INFO-KEEPD ).
		
		DATA(LV_DATE_CHAR) = CONV STRING( '''' && LV_DATE  && '''' ).
		DATA(LV_IFID_CHAR) = CONV STRING( '''' && IV_ZIFID && '''' ).
		
		CONCATENATE 'ZIFID = ' LV_IFID_CHAR ' AND ' ZCL_COC_COMM=>MS_INFO-IFDAT ' < ' LV_DATE_CHAR
		       INTO DATA(LV_WHERE) SEPARATED BY SPACE.
		       
   "Delete Header table 
	 DELETE 
	   FROM (ZCL_COC_COMM=>MS_IF_INFO-HDTAB)
	  WHERE (LV_WHERE).
	 
   "Delete Item table 
	 DELETE 
	   FROM (ZCL_COC_COMM=>MS_IF_INFO-ITTAB)
	  WHERE (LV_WHERE).
	 
	 COMMIT WORK.
	 
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD POPUP_ATTACH.

    CALL FUNCTION 'ZCOCCM_POPUP_ATTACH'
      EXPORTING
        I_INSTID = IV_INSTID
        I_TYPEID = IV_TYPEID
        I_MODE   = IV_MODE
        I_COMMIT = IV_COMMIT.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SAVE_IF_HEADER.
* +--------------------------------------------------------------------------------------</SIGNATURE>
* IV_ZIFID : I/F ID
* IV_IFSYS : I/F 상대 시스템 
* IV_LOGTY : I/F 로그 업데이트 여부
* IV_IFDAT : I/F 생성일
* IV_INFNO : I/F 헤더 순번
* IV_IFRLT : I/F 결과
* IV_IFMSG : I/F 메시지
* IV_IFCNT : I/F 아이템 건수
* +--------------------------------------------------------------------------------------</SIGNATURE>
* 인터페이스 시작 시 IV_LOGTY = 'C'로 생성 후,
*         종료 후 IV_LOGTY = 'U'로 업데이트 한다.
* +--------------------------------------------------------------------------------------</SIGNATURE>
* ex)
*  "인터페이스 헤더 정보 생성
*  ZCL_COC_COMM=>SAVE_IF_HEADER( EXPORTING IV_ZIFID = 'IF_002'
*                                          IV_IFSYS = 'HR_100'
*                                          IV_LOGTY = 'C'       "로그 생성
*                                IMPORTING EV_IFDAT = DATA(LV_IFDAT)
*                                          EV_INFNO = DATA(LV_INFNO) ).
*
*  "인터페이스 헤더 정보 업데이트
*  ZCL_COC_COMM=>SAVE_IF_HEADER( EXPORTING IV_ZIFID = 'IF_002'
*                                          IV_IFSYS = 'HR_100'
*                                          IV_LOGTY = 'U'       "로그 업데이트
*                                          IV_IFDAT = LV_IFDAT
*                                          IV_INFNO = LV_INFNO
*                                          IV_IFRLT = LS_RETURN-TYPE
*                                          IV_IFMSG = LS_RETURN-MESSAGE
*                                          IV_IFCNT = LINES( GT_ALV1 )
*                               ).
* +--------------------------------------------------------------------------------------</SIGNATURE>
  DATA: LS_HEADER TYPE ZCOCT009.
  	
  CLEAR: EV_IFDAT, EV_INFNO.
  
  "Check Logging Activation
  ZCL_COC_COMM=>GET_IF_INFO( IV_ZIFID = IV_ZIFID ).
  
  CHECK ZCL_COC_COMM=>MS_IF_INFO-DEACT EQ SPACE.
  
  DATA(LV_IFDAT) = SY-DATUM.
  
  CASE IV_LOGTY.
  	
  	WHEN ZCOC_C.
  	
  	  "다음 순번 추출
  	  SELECT MAX( INFNO )
  	  	FROM ZCOCT009
  	   WHERE ZIFID = @IV_ZIFID
  	     AND IFDAT = @LV_IFDAT
  	  	INTO @DATA(LV_MAX_CNT).
 
      IF SY-SUBRC = 0.
      	LV_MAX_CNT = LV_MAX_CNT + 1.
      ELSE.
      	LV_MAX_CNT = 1.
      ENDIF.
      
      "테이블 반영 전 동일한 MAX SEQNO를 가져갈 수 있는 문제로 LOCK 설정
*      DO 100 TIMES.
*      	
*      	CALL FUNCTION 'ENQUEUE_EZCOCT009'
*          EXPORTING 
*            ZIFID          = IV_ZIFID
*            IFDAT          = LV_IFDAT
*            IFSYS          = IV_IFSYS
*            INFNO          = LV_MAX_CNT
*          EXCEPTIONS
*            FOREIGN_LOCK   = 1
*            SYSTEM_FAILURE = 2
*            OTHERS         = 3.
*            
*        IF SY-SUBRC = 0.
*        	EXIT.
*        ELSE.
*        	LV_MAX_CNT = LV_MAX_CNT + 1.
*        ENDIF.
*        
*      ENDDO.

      LS_HEADER = VALUE #( ZIFID = IV_ZIFID
                           IFSYS = ZCL_COC_COMM=>MS_IF_INFO-IFSYS
                           IFDAT = LV_IFDAT
                           INFNO = LV_MAX_CNT
                           IFNAM = SY-UNAME
                           XFLAG = ZCOC_X
                           ERDAT = SY-DATUM
                           ERZET = SY-UZEIT
                           ERNAM = SY-UNAME
                         ).
                       
      EV_IFDAT = LV_IFDAT.
      EV_INFNO = LV_MAX_CNT.
    
    WHEN ZCOC_U.
    
      IF IV_INFNO < 1.
      	EXIT.
      ENDIF.
      
      SELECT SINGLE *
      	FROM ZCOCT009
      	INTO LS_HEADER
       WHERE ZIFID = IV_ZIFID
         AND IFDAT = IV_IFDAT
         AND INFNO = IV_INFNO.
         
      LS_HEADER = VALUE #( BASE LS_HEADER
                           SUBRC = IV_IFRLT
                           MESSG = IV_IFMSG
                           IFCNT = IV_IFCNT
                           AEDAT = SY-DATUM
                           AEZET = SY-UZEIT
                           AENAM = SY-UNAME
                         ).  
                         
    ENDCASE.
    
    MODIFY ZCOCT009 FROM LS_HEADER.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SAVE_IF_ITEM.
* +--------------------------------------------------------------------------------------</SIGNATURE>
* IV_ZIFID : I/F ID
* IV_IFSYS : I/F 상대 시스템 
* IV_IFDAT : I/F 생성일
* IV_INFNO : I/F 헤더 순번
* IV_IFRLT : I/F 결과
* IV_IFMSG : I/F 메시지
* IV_IFCNT : I/F 아이템 건수
* +--------------------------------------------------------------------------------------</SIGNATURE>
* 아이템 테이블 생성 시 아래 필드 필수
* ZIFID : I/F ID
* IFDAT : I/F 생성일
* IFSYS : I/F 상대 시스템
* INFNO : I/F 헤더 순번
* SEQNO : I/F 로그 순번
* SUBRC : I/F 결과('S' or 'E')
* MESSG : I/F 메시지
* +--------------------------------------------------------------------------------------</SIGNATURE>
* ex)
*  "인터페이스 아이템 데이터 저장
*  ZCL_COC_COMM=>SAVE_IF_ITEM( EXPORTING IV_ZIFID = 'IF_002'
*                                        IV_IFSYS = 'HR_100'
*                                        IV_IFDAT = LV_IFDAT
*                                        IV_INFNO = LV_INFNO
*                                        IV_IFRLT = LS_RETURN-TYPE
*                                        IV_IFMSG = LS_RETURN-MESSAGE
*                                        IT_DATA  = GT_ALV1 
*                            ).
* +--------------------------------------------------------------------------------------</SIGNATURE>
  "Create Dynamic Table
  DATA: L_DATA_WA  TYPE REF TO DATA,
  	    L_DATA_TAB TYPE REF TO DATA,
  	    LV_SEQNO   TYPE I.
  	    
  FIELD-SYMBOLS: <FS_IT> TYPE STANDARD TABLE.
  
  "Check Logging Actication
  ZCL_COC_COMM=>GET_IF_INFO( IV_ZIFID = IV_ZIFID ).
  
  CHECK ZCL_COC_COMM=>MS_IF_INFO-DEACT EQ SPACE.
  
  CREATE DATA L_DATA_TAB TYPE STANDARD TABLE OF (ZCL_COC_COMM=>MS_IF_INFO-ITTAB).
  ASSIGN L_DATA_TAB->* TO <FS_IT>.
  
  "I/F data
  LOOP AT IT_DATA ASSIGNING FIELD-SYMBOL(<FS_DATA>).
  	
  	APPEND INITIAL LINE TO <FS_IT> ASSIGNING FIELD-SYMBOL(<FS_WA>).
  	MOVE-CORRESPONDING <FS_DATA> TO <FS_WA>.
  	
  	LV_SEQNO = LV_SEQNO + 1.
  	
  	ASSIGN COMPONENT 'ZIFID' OF STRUCTURE <FS_WA> TO FIELD-SYMBOL(<FS_FIELDS>).
  	<FS_FIELDS> = IV_ZIFID.
    ASSIGN COMPONENT 'IFSYS' OF STRUCTURE <FS_WA> TO <FS_FIELDS>.
    IF SY-SUBRC = 0.
  	  <FS_FIELDS> = ZCL_COC_COMM=>MS_IF_INFO-IFSYS.
    ENDIF.
    ASSIGN COMPONENT 'IFDAT' OF STRUCTURE <FS_WA> TO <FS_FIELDS>.
  	<FS_FIELDS> = IV_IFDAT.
    ASSIGN COMPONENT 'INFNO' OF STRUCTURE <FS_WA> TO <FS_FIELDS>.
  	<FS_FIELDS> = IV_INFNO.
    ASSIGN COMPONENT 'SEQNO' OF STRUCTURE <FS_WA> TO <FS_FIELDS>.
  	<FS_FIELDS> = LV_SEQNO.

    IF IV_DO_NOT_UPDATE_MESSAGE IS INITIAL.
      ASSIGN COMPONENT 'SUBRC' OF STRUCTURE <FS_WA> TO <FS_FIELDS>.
      <FS_FIELDS> = IV_IFRLT.
      ASSIGN COMPONENT 'MESSG' OF STRUCTURE <FS_WA> TO <FS_FIELDS>.
      <FS_FIELDS> = IV_IFMSG.
    ENDIF.
      
    ZCL_COC_COMM=>SET_TIMESTAMP( EXPORTING IV_TYPE = ZCOC_I
                                 IMPORTING CS_WA   = <FS_WA> ).
                                 
  ENDLOOP.
  
  MODIFY (ZCL_COC_COMM=>MS_IF_INFO-ITTAB) FROM TABLE <FS_IT>.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_NEXT_NUMBER.

    "번호 채번
    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR           = IV_NR_RANGE_NR
        OBJECT                = IV_OBJECT
        SUBOBJECT             = IV_BUKRS
        TOYEAR                = IV_GJAHR
      IMPORTING
        NUMBER                = RV_NUMBER
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERNAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.
        
    IF SY-SUBRC <> 0.
    	MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
    	      WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMETHOD.















* <SIGNATURE>---------------------------------------------------------------------------------------+
* | STATIC PUBLIC METHOD ZCL_COC_COMM=>GET_BNAME_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [--->] I_KOKRS                        TYPE        KOKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD CLEAR_SELECTION_SCREEN.

    DATA: LV_SUBRC TYPE SY-SUBRC,
    	    LR_KIND  TYPE RANGE OF RSSCR_KIND.
    	    
    "Selections 추출
    ZCL_COC_COMM=>GET_PGM_PARAMETER( IMPORTING ET_SELINFO = DATA(LT_SELINFO) ).
    
    "Selections 삭제
    IF IV_KIND IS NOT INITIAL.
    	LR_KIND = VALUE #( ( SIGN = 'I' OPTION = 'EQ' LOW = IV_KIND ) ).
    ENDIF.
    
    LOOP AT LT_SELINFO ASSIGNING FIELD-SYMBOL(<FS_SELINFO>) WHERE KIND IN LR_KIND.
    	DATA(LV_FORMNAME) = CONV CHAR50( |%_LINK_|   && <FS_SELINFO>-NAME ).
    	DATA(LV_KIND)     = CONV CHAR50( |RSSELTAB_| && <FS_SELINFO>-KIND ).
    	PERFORM (LV_FORMNAME) IN PROGRAM (IV_CPROG) USING 'SAPLSVAR' LV_KIND LV_SUBRC IF FOUND.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.