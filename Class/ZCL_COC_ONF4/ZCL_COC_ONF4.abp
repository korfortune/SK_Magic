CLASS ZCL_COC_ONF4 DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF TY_COLOR,
        NAME    TYPE CHAR11,
        COL     TYPE LVC_COL,
        INT     TYPE LVC_INT,
        INV     TYPE LVC_INV,
        TEXT    TYPE TEXT100,
        SCOLTAB TYPE LVC_T_SCOL,
      END OF TY_COLOR .
    TYPES:
      BEGIN OF TY_VAL,
        VALUE TYPE TEXT79_D,
      END OF TY_VAL .
    TYPES:
      TY_COLOR_T TYPE TABLE OF TY_COLOR .
    TYPES:
      TY_HELP    TYPE TABLE OF HELP_VTAB .
    TYPES:
      TY_HVALUE  TYPE TABLE OF HELP_VALUE .
    TYPES:
      TY_VALUE   TYPE TABLE OF TY_VAL .

    CLASS-DATA MT_COLOR TYPE TY_COLOR_T .
    CLASS-DATA MR_SALV TYPE REF TO CL_SALV_TABLE .
    CLASS-DATA MT_VRM_VALUES TYPE VRM_VALUES .

    CLASS-METHODS F4_BUKRS
      IMPORTING
        !I_KOKRS       TYPE KOKRS
      RETURNING
        VALUE(E_BUKRS) TYPE BUKRS .
    CLASS-METHODS F4_COLOR
      CHANGING
        VALUE(CV_EMPHASIZE) TYPE LVC_EMPHSZ OPTIONAL
      RETURNING
        VALUE(RS_COLOR)     TYPE LVC_S_COLO .
    CLASS-METHODS F4_DATE
      IMPORTING
        VALUE(IV_DATE)  TYPE ANY OPTIONAL
      EXPORTING
        VALUE(EV_DATE)  TYPE ANY
        VALUE(EV_GJAHR) TYPE GJAHR
        VALUE(EV_MONAT) TYPE MONAT .
    CLASS-METHODS F4_DOMAIN_VALUE
      IMPORTING
        !I_DOMNAME      TYPE DOMNAME
      RETURNING
        VALUE(E_RETURN) TYPE DOMVALUE_L .
    CLASS-METHODS F4_FOR_YYYYMM
      RETURNING
        VALUE(RV_SPMON) TYPE KMONTH . "SPMON .
    CLASS-METHODS F4_GROUP
      IMPORTING
        !I_CLASS          TYPE CHAR04 "SETCLASS
        !I_KOKRS          TYPE KOKRS OPTIONAL
        !I_KTOPL          TYPE KTOPL OPTIONAL
        !I_FIKRS          TYPE FIKRS OPTIONAL
      RETURNING
        VALUE(E_SET_NAME) TYPE CHAR24. "RGSBM-SHORTNAME .
    CLASS-METHODS F4_IFILE
      IMPORTING
        !IV_FILENAME          TYPE STRING OPTIONAL
        VALUE(IV_FILE_FILTER) TYPE STRING DEFAULT '(*.xlsx;*.xls)|*.xlsx;*.xls'
        !IV_INITIAL_DIRECTORY TYPE STRING OPTIONAL
      RETURNING
        VALUE(RV_FULLPATH)    TYPE STRING .
    CLASS-METHODS F4_KSGRU
      IMPORTING
        !IV_KOKRS       TYPE KOKRS OPTIONAL
        !IV_SETCLASS    TYPE CHAR04 "SETCLASS
        !IV_REPID       TYPE D020S-PROG OPTIONAL
        !IV_DYNNR       TYPE D020S-DNUM OPTIONAL
      RETURNING
        VALUE(RV_KSTGR) TYPE STRING.
    CLASS-METHODS F4_PRCTR .
    CLASS-METHODS F4_PRGRU
      IMPORTING
        !I_GUBUN  TYPE DYNPREAD-FIELDNAME OPTIONAL
        !IV_REPID TYPE D020S-PROG OPTIONAL
        !I_DYNNR  TYPE D020S-DNUM OPTIONAL
      CHANGING
        !E_PROGR  TYPE CHAR24. "FMII1-PROGR .
    CLASS-METHODS F4_STAGR
      IMPORTING
        VALUE(IV_KOKRS) TYPE KOKRS OPTIONAL
      RETURNING
        VALUE(EV_STAGR) TYPE STAGR .
    CLASS-METHODS F4_BNAME
      RETURNING
        VALUE(RV_BNAME) TYPE BNAME.
    CLASS-METHODS F4_WERKS
      IMPORTING
        !I_BUKRS       TYPE BUKRS
      EXPORTING
        !E_BUKRS       TYPE BUKRS
      RETURNING
        VALUE(E_WERKS) TYPE WERKS_D .
    CLASS-METHODS F4_KOSTL
      IMPORTING
        !IV_KOKRS TYPE KOKRS
        !IV_BNAME TYPE XUBNAME OPTIONAL
        !IV_TYPE  TYPE CHAR01  OPTIONAL
      RETURNING
        VALUE(RV_KOSTL) TYPE KOSTL .
    CLASS-METHODS F4_SAKNR
      IMPORTING
        !IV_KTOPL TYPE KTOPL DEFAULT '1000'
        !IV_KOKRS TYPE KOKRS
        !IV_TYPE  TYPE CHAR01  OPTIONAL
      RETURNING
        VALUE(RV_SAKNR) TYPE SAKNR .
    CLASS-METHODS F4_KOKRS
      RETURNING
        VALUE(RV_KOKRS) TYPE KOKRS .
    CLASS-METHODS F4_VERSN
      IMPORTING
        !IV_KOKRS TYPE KOKRS
        !IV_CLASS TYPE ZECLASS DEFAULT 'A04' "CHAR5 코드 클래스
        !IV_ALL   TYPE C DEFAULT ' '
      RETURNING
        VALUE(RV_VERSN) TYPE VERSN .
    CLASS-METHODS SET_VRM_LIST
      IMPORTING
        !IV_VRM_ID TYPE VRM_ID
        !IV_VRM_VALUES TYPE VRM_VALUES.
    CLASS-METHODS F4_MATNR3
      IMPORTING
        !IV_KOKRS TYPE KOKRS
      RETURNING
        VALUE(RV_MATNR) TYPE MATNR .
    CLASS-METHODS F4_MATNR2
      IMPORTING
        !IV_KOKRS TYPE KOKRS
        !IV_GJAHR TYPE GJAHR
      RETURNING
        VALUE(RV_MATNR) TYPE MATNR .
    CLASS-METHODS F4_MATNR
      IMPORTING
        !IT_MTART TYPE RANGES_MATNR OPTIONAL
      RETURNING
        VALUE(RV_MATNR) TYPE MATNR .
    CLASS-METHODS CALL_F4
      IMPORTING
        !I_RETFIELD TYPE FIELDNAME
        !I_DYNFIELD TYPE DYNFNAM OPTIONAL
        !IT_DATA    TYPE STANDARD TABLE
      RETURNING
        VALUE(RV_SHVALUE) TYPE SHVALUE_D.
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA MS_COLOR TYPE LVC_S_COLO .

    METHODS ON_SALV_DOUBLE_CLICK
        FOR EVENT DOUBLE_CLICK OF CL_SALV_EVENTS_TABLE
      IMPORTING
        !ROW
        !COLUMN.
ENDCLASS.



CLASS ZCL_COC_ONF4 IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_BUKRS
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_KOKRS                        TYPE        KOKRS
* | [<-()] E_BUKRS                        TYPE        BUKRS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_BUKRS.

    DATA: LR_KOKRS TYPE RANGE OF KOKRS.

    IF I_KOKRS IS NOT INITIAL.
      LR_KOKRS = VALUE #( ( SIGN   = 'I' OPTION = 'EQ' LOW    = I_KOKRS ) ).
    ENDIF.

    SELECT B~BUKRS,  
    	     B~BUTXT
      FROM TKA02 AS A JOIN T001 AS B
                 ON A~BUKRS = B~BUKRS
     WHERE A~KOKRS IN @LR_KOKRS
     ORDER BY B~BUKRS
      INTO TABLE @DATA(LT_DATA).

    E_BUKRS = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'BUKRS'
                                     IT_DATA    = LT_DATA ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_COLOR
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CV_EMPHASIZE                   TYPE        LVC_EMPHSZ(optional)
* | [<-()] RS_COLOR                       TYPE        LVC_S_COLO
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_COLOR.

    DATA: GR_EVENTS TYPE REF TO ZCL_COC_ONF4.

    DATA: LT_LVC_T_SCOL TYPE LVC_T_SCOL.

    MT_COLOR = VALUE #( ( NAME = 'ALV_BACK    ' COL = 0 INT = 0 INV = 0 TEXT = 'Light Grey' )
                        ( NAME = 'ALV_BACKINT ' COL = 0 INT = 1 INV = 0 TEXT = 'Light Grey with Blue Text' )
                        ( NAME = 'ALV_HEAD    ' COL = 1 INT = 0 INV = 0 TEXT = 'Light Blue' )
                        ( NAME = 'ALV_HEADINT ' COL = 1 INT = 1 INV = 0 TEXT = 'Blue' )
                        ( NAME = 'ALV_NORM    ' COL = 2 INT = 0 INV = 0 TEXT = 'Light Purple' )
                        ( NAME = 'ALV_NORMINT ' COL = 2 INT = 1 INV = 0 TEXT = 'Very Light Blue' )
                        ( NAME = 'ALV_TOTA    ' COL = 3 INT = 0 INV = 0 TEXT = 'Light Yellow' )
                        ( NAME = 'ALV_TOTAINT ' COL = 3 INT = 1 INV = 0 TEXT = 'Yellow' )
                        ( NAME = 'ALV_KEY     ' COL = 4 INT = 0 INV = 0 TEXT = 'Light Blue Grey' )
                        ( NAME = 'ALV_KEYINT  ' COL = 4 INT = 1 INV = 0 TEXT = 'Blue Grey' )
                        ( NAME = 'ALV_POS     ' COL = 5 INT = 0 INV = 0 TEXT = 'Light Green' )
                        ( NAME = 'ALV_POSINT  ' COL = 5 INT = 1 INV = 0 TEXT = 'Green' )
                        ( NAME = 'ALV_NEG     ' COL = 6 INT = 0 INV = 0 TEXT = 'Light Red' )
                        ( NAME = 'ALV_NEGINT  ' COL = 6 INT = 1 INV = 0 TEXT = 'Red' )
                        ( NAME = 'ALV_GRP     ' COL = 7 INT = 0 INV = 0 TEXT = 'Light Orange' )
                        ( NAME = 'ALV_GRPINT  ' COL = 7 INT = 1 INV = 0 TEXT = 'Orange' ) ).

    DATA(LO_ALV) = NEW ZCL_COC_ALV( ).
    DATA(LT_FDCAT) = LO_ALV->MAKE_FIELDCATALOG( IV_MODE = 'R' IT_TABLE = MT_COLOR ).

    LOOP AT MT_COLOR ASSIGNING FIELD-SYMBOL(<FS_COLOR>).
      LOOP AT LT_FDCAT INTO DATA(LS_FDCAT).
        <FS_COLOR>-SCOLTAB = VALUE #( BASE <FS_COLOR>-SCOLTAB
                                           ( FNAME = LS_FDCAT-FIELDNAME
                                             COLOR = VALUE #( COL = <FS_COLOR>-COL
                                                              INT = <FS_COLOR>-INT
                                                              INV = <FS_COLOR>-INV ) ) ).
      ENDLOOP.
    ENDLOOP.

    TRY.
        CL_SALV_TABLE=>FACTORY( IMPORTING R_SALV_TABLE = MR_SALV
                                CHANGING  T_TABLE      = MT_COLOR[] ).
      CATCH CX_SALV_MSG.
    ENDTRY.

    DATA(LR_FUNCTIONS) = MR_SALV->GET_FUNCTIONS( ).
    DATA(LR_COLUMNS)   = MR_SALV->GET_COLUMNS( ).
    DATA(LR_DISP_SET)  = MR_SALV->GET_DISPLAY_SETTINGS( ).

*-- Set optimize
    LR_COLUMNS->SET_OPTIMIZE( ABAP_TRUE ).
    LR_COLUMNS->SET_COLOR_COLUMN( 'SCOLTAB' ).

*-- Set popup
    MR_SALV->SET_SCREEN_POPUP( START_COLUMN = 100
                               END_COLUMN   = 140
                               START_LINE   = 5
                               END_LINE     = 20 ).

*-- Set title
    LR_DISP_SET->SET_LIST_HEADER( |ALV control: Color| ).
    LR_COLUMNS->GET_COLUMN( 'NAME' )->SET_SHORT_TEXT(  CONV #( TEXT-H01 ) ).
    LR_COLUMNS->GET_COLUMN( 'NAME' )->SET_MEDIUM_TEXT( CONV #( TEXT-H01 ) ).
    LR_COLUMNS->GET_COLUMN( 'NAME' )->SET_LONG_TEXT(   CONV #( TEXT-H01 ) ).

    LR_COLUMNS->GET_COLUMN( 'COL' )->SET_SHORT_TEXT(  CONV #( TEXT-H02 ) ).
    LR_COLUMNS->GET_COLUMN( 'COL' )->SET_MEDIUM_TEXT( CONV #( TEXT-H02 ) ).
    LR_COLUMNS->GET_COLUMN( 'COL' )->SET_LONG_TEXT(   CONV #( TEXT-H02 ) ).

    LR_COLUMNS->GET_COLUMN( 'INT' )->SET_SHORT_TEXT(  CONV #( TEXT-H03 ) ).
    LR_COLUMNS->GET_COLUMN( 'INT' )->SET_MEDIUM_TEXT( CONV #( TEXT-H03 ) ).
    LR_COLUMNS->GET_COLUMN( 'INT' )->SET_LONG_TEXT(   CONV #( TEXT-H03 ) ).

    LR_COLUMNS->GET_COLUMN( 'INV' )->SET_SHORT_TEXT(  CONV #( TEXT-H04 ) ).
    LR_COLUMNS->GET_COLUMN( 'INV' )->SET_MEDIUM_TEXT( CONV #( TEXT-H04 ) ).
    LR_COLUMNS->GET_COLUMN( 'INV' )->SET_LONG_TEXT(   CONV #( TEXT-H04 ) ).

    LR_COLUMNS->GET_COLUMN( 'TEXT' )->SET_SHORT_TEXT(  CONV #( TEXT-H05 ) ).
    LR_COLUMNS->GET_COLUMN( 'TEXT' )->SET_MEDIUM_TEXT( CONV #( TEXT-H05 ) ).
    LR_COLUMNS->GET_COLUMN( 'TEXT' )->SET_LONG_TEXT(   CONV #( TEXT-H05 ) ).

*-- Evnets
    DATA(LR_EVENTS) = MR_SALV->GET_EVENT( ).
    CREATE OBJECT GR_EVENTS.
    SET HANDLER GR_EVENTS->ON_SALV_DOUBLE_CLICK FOR LR_EVENTS.

*-- Show SALV
    MR_SALV->DISPLAY( ).

*-- Return Selected Clolor Info.
    RS_COLOR = GR_EVENTS->MS_COLOR.

    IF RS_COLOR IS NOT INITIAL.
      CV_EMPHASIZE = 'C' && RS_COLOR-COL && RS_COLOR-INT && RS_COLOR-INV.
    ENDIF.

    FREE: MR_SALV, GR_EVENTS.

  ENDMETHOD.
  

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_DATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DATE                        TYPE        ANY(optional)
* | [<---] EV_DATE                        TYPE        ANY
* | [<---] EV_GJAHR                       TYPE        GJAHR
* | [<---] EV_MONAT                       TYPE        MONAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_DATE.

    DATA: LV_DATE TYPE DATUM,
          LV_MONT TYPE ISELLIST-MONTH.

    "Check output parameter type
    DESCRIBE FIELD EV_DATE TYPE DATA(LV_TYPE).

    IF LV_TYPE NE 'N' AND
       LV_TYPE NE 'D'.

      MESSAGE S000(0K) WITH 'Check output parameter' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF IV_DATE IS INITIAL.
      LV_MONT = SY-DATUM(6).
    ELSE.
      LV_MONT(4) = IV_DATE(4).
      LV_MONT+4  = IV_DATE+4.
    ENDIF.

    "Popup calendar
    CALL FUNCTION 'POPUP_TO_SELECT_MONTH'
      EXPORTING
        ACTUAL_MONTH               = LV_MONT
        LANGUAGE                   = SY-LANGU
      IMPORTING
        SELECTED_MONTH             = LV_DATE(6)
      EXCEPTIONS
        FACTORY_CALENDAR_NOT_FOUND = 1
        HOLIDAY_CALENDAR_NOT_FOUND = 2
        MONTH_NOT_FOUND            = 3
        OTHERS                     = 4.
    IF SY-SUBRC = 0.

      EV_GJAHR = LV_DATE(4).
      EV_MONAT = LV_DATE+4(2).

      DATA(LV_LEN) = STRLEN( EV_DATE ).
      CASE LV_LEN.
        WHEN 6 OR 7.
          EV_DATE(4) = EV_GJAHR.
          EV_DATE+4  = EV_MONAT.
        WHEN 4.
          EV_DATE = EV_GJAHR.
        WHEN 2.
          EV_DATE = EV_MONAT.
      ENDCASE.

    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_DOMAIN_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_DOMNAME                      TYPE        DOMNAME
* | [<-()] E_RETURN                       TYPE        DOMVALUE_L
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_DOMAIN_VALUE.

    SELECT DOMVALUE_L, 
    	     DDTEXT
      FROM DD07T
     WHERE DOMNAME    EQ @I_DOMNAME
       AND DDLANGUAGE EQ @SY-LANGU
      INTO TABLE @DATA(LT_DATA).

    CHECK SY-SUBRC = 0.

    E_RETURN = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'DOMVALUE_L'
                                      IT_DATA    = LT_DATA ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_FOR_YYYYMM
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SPMON                       TYPE        KMONTH
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_FOR_YYYYMM.

    DATA LV_SPMON TYPE KMONTH.
    LV_SPMON = SY-DATLO(6).

    CALL FUNCTION 'POPUP_TO_SELECT_MONTH'
      EXPORTING
        ACTUAL_MONTH   = LV_SPMON
      IMPORTING
        SELECTED_MONTH = RV_SPMON.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_GROUP
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_CLASS                        TYPE        CHAR04
* | [--->] I_KOKRS                        TYPE        KOKRS(optional)
* | [--->] I_KTOPL                        TYPE        KTOPL(optional)
* | [--->] I_FIKRS                        TYPE        FIKRS(optional)
* | [<-()] E_SET_NAME                     TYPE        CHAR24
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_GROUP.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_IFILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FILENAME                    TYPE        STRING(optional)
* | [--->] IV_FILE_FILTER                 TYPE        STRING (default ='(*.xlsx;*.xls)|*.xlsx;*.xls')
* | [--->] IV_INITIAL_DIRECTORY           TYPE        STRING(optional)
* | [<-()] RV_FULLPATH                    TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_IFILE.

    DATA: LT_FILE        TYPE FILETABLE,
          LV_TITLE       TYPE STRING,
          LV_LOC_FN      TYPE STRING,
          LV_LOC_DIR     TYPE STRING,
          LV_USER_ACTION TYPE I,
          LV_SUBRC       TYPE SY-SUBRC.

    DATA LV_MASK TYPE CHAR255.

*-- Set field filter
    IF IV_FILE_FILTER IS INITIAL.
      DATA(LT_XML_CHOICE) = CL_SALV_EXPORT_XML_DIALOG=>GET_GUI_SPREADSHEET_FORMATS( ).
      DATA(LS_XML_CHOICE) = LT_XML_CHOICE[ XML_TYPE = '10' ].

      CALL METHOD CL_ALV_BDS=>CREATE_MASK_FOR_FILEFILTER
        EXPORTING
          I_FRONTEND          = LS_XML_CHOICE-FRONTEND
        IMPORTING
          E_DEFAULT_EXTENSION = DATA(LV_DEFAULT_EXTENSION)
        CHANGING
          C_MASK              = LV_MASK.

      IV_FILE_FILTER = LV_MASK.
    ENDIF.

*-- Open file select dialog
    CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
      EXPORTING
        WINDOW_TITLE            = LV_TITLE
        DEFAULT_EXTENSION       = LV_DEFAULT_EXTENSION
        DEFAULT_FILENAME        = IV_FILENAME
        FILE_FILTER             = IV_FILE_FILTER
        INITIAL_DIRECTORY       = IV_INITIAL_DIRECTORY
        MULTISELECTION          = SPACE
      CHANGING
        FILE_TABLE              = LT_FILE
        RC                      = LV_SUBRC
        USER_ACTION             = LV_USER_ACTION
      EXCEPTIONS
        FILE_OPEN_DIALOG_FAILED = 1
        CNTL_ERROR              = 2
        ERROR_NO_GUI            = 3
        NOT_SUPPORTED_BY_GUI    = 4
        OTHERS                  = 5.

    IF SY-SUBRC IS NOT INITIAL.
      EXIT.
    ENDIF.

    IF LV_USER_ACTION = CL_GUI_FRONTEND_SERVICES=>ACTION_CANCEL.
      MESSAGE S161(ALVHT).
      RETURN.
    ENDIF.

    RV_FULLPATH = LT_FILE[ 1 ].

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_KSGRU
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_KOKRS                       TYPE        KOKRS(optional)
* | [--->] IV_SETCLASS                    TYPE        CHAR04
* | [--->] IV_REPID                       TYPE        D020S-PROG(optional)
* | [--->] IV_DYNNR                       TYPE        D020S-DNUM(optional)
* | [<-()] RV_KSTGR                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_KSGRU.

    DATA: LV_OBJECT_GROUP TYPE CHAR24. "RGSBM-SHORTNAME.

    CASE IV_SETCLASS.
      WHEN '0101'.
        DATA(LV_FIELD_NAME) = CONV CHAR30( 'KOSTL' ).
      WHEN '0102'.
        LV_FIELD_NAME = 'KSTAR'.
    ENDCASE.

    CALL FUNCTION 'K_GROUP_SELECT'
      EXPORTING
        KOKRS         = IV_KOKRS
        CLASS         = IV_SETCLASS
        FIELD_NAME    = LV_FIELD_NAME
        TABLE         = 'CCSS'
      IMPORTING
        SET_NAME      = LV_OBJECT_GROUP
      EXCEPTIONS
        NO_SET_PICKED = 1
        OTHERS        = 2.

    IF SY-SUBRC = 0.
      RV_KSTGR = LV_OBJECT_GROUP.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_PRCTR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_PRCTR.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_PRGRU
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_GUBUN                        TYPE        DYNPREAD-FIELDNAME(optional)
* | [--->] IV_REPID                       TYPE        D020S-PROG(optional)
* | [--->] I_DYNNR                        TYPE        D020S-DNUM(optional)
* | [<-->] E_PROGR                        TYPE        CHAR24
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_PRGRU.

    DATA: LV_OBJECT_GROUP TYPE RGSBM-SHORTNAME.

    CALL FUNCTION 'K_GROUP_SELECT'
      EXPORTING
        CLASS         = '0106'
        FIELD_NAME    = 'PRCTR'
      IMPORTING
        SET_NAME      = LV_OBJECT_GROUP
      EXCEPTIONS
        NO_SET_PICKED = 1
        OTHERS        = 2.

    IF SY-SUBRC = 0.
      E_PROGR = LV_OBJECT_GROUP.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_STAGR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_KOKRS                       TYPE        KOKRS(optional)
* | [<-()] EV_STAGR                       TYPE        STAGR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_STAGR.

    SELECT A~STAGR,
           B~BEZEI
      FROM TKA03 AS A INNER JOIN TKT03 AS B
                 ON A~KOKRS = B~KOKRS
                AND A~STAGR = B~STAGR
     WHERE A~KOKRS = @IV_KOKRS
     ORDER BY A~STAGR
      INTO TABLE @DATA(LT_DATA).

    EV_STAGR = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'STAGR'
                                      IT_DATA    = LT_DATA ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_WERKS
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_BUKRS                        TYPE        BUKRS
* | [<---] E_BUKRS                        TYPE        BUKRS
* | [<-()] E_WERKS                        TYPE        WERKS_D
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_WERKS.

    DATA: LR_BUKRS      TYPE RANGE OF BUKRS.

    IF I_BUKRS IS NOT INITIAL.
      LR_BUKRS[] = VALUE #( ( SIGN = 'I' OPTION = 'EQ' LOW = I_BUKRS ) ).
    ENDIF.

    SELECT T2~WERKS, T3~MC_NAME1, T3~NAME2, T3~MC_CITY1, T3~POST_CODE1, T3~SORT1, T3~SORT2, T1~BUKRS
      FROM T001K AS T1 INNER JOIN T001W AS T2
                 ON T1~BWKEY = T2~BWKEY
                       LEFT JOIN ADRC AS T3
                 ON T2~ADRNR      = T3~ADDRNUMBER
                AND T3~DATE_FROM <= @SY-DATUM
                AND T3~DATE_TO   >= @SY-DATUM
    WHERE T1~BUKRS IN @LR_BUKRS
    ORDER BY WERKS
     INTO TABLE @DATA(LT_DATA).

    E_WERKS = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'WERKS'
                                      IT_DATA    = LT_DATA ).

    CHECK E_BUKRS IS REQUESTED.

    SELECT SINGLE BUKRS
      FROM T001W AS A INNER JOIN T001K AS B
                 ON A~BWKEY = B~BWKEY
     WHERE A~WERKS = @E_WERKS
      INTO @E_BUKRS.

    TRY.

        DATA: I_VALUE TYPE DYNPREAD-FIELDVALUE.
        I_VALUE = E_BUKRS.

        CALL FUNCTION 'SET_DYNP_VALUE'
          EXPORTING
            I_FIELD = 'P_BUKRS'
            I_REPID = SY-CPROG
            I_DYNNR = SY-DYNNR
            I_VALUE = I_VALUE.

      CATCH CX_ROOT INTO DATA(LX_ROOT).
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_COC_ONF4->ON_SALV_DOUBLE_CLICK
* +-------------------------------------------------------------------------------------------------+
* | [--->] ROW                            LIKE
* | [--->] COLUMN                         LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD ON_SALV_DOUBLE_CLICK.

    READ TABLE MT_COLOR INTO DATA(MS_WA) INDEX ROW.
    IF SY-SUBRC = 0.
      MOVE-CORRESPONDING MS_WA TO MS_COLOR.
      MR_SALV->CLOSE_SCREEN( ).
    ENDIF.

  ENDMETHOD.
  
  





	METHOD F4_KOKRS.
	
		DATA: BEGIN OF LS_DATA,
						KOKRS TYPE TKA01-KOKRS,
						BEZEI TYPE TKA01-BEZEI,
					END OF LS_DATA.
		DATA: LT_DATA LIKE TABLE OF LS_DATA.
		
		SELECT FIELD05 AS KOKRS,
					 FIELD09 AS BEZEI
		  FROM ZCOCT003
		 WHERE ZMODULE = 'CO'
		   AND CLASS   = 'A00'
		   AND DELFLAG = @SPACE
		 ORDER BY FIELD05
		  INTO CORRESPONDING FIELDS OF TABLE @LT_DATA.
		  
    RV_KOKRS = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'KOKRS'
                                      IT_DATA    = LT_DATA ).		  
	  
  ENDMETHOD.










	METHOD F4_SAKNR.
	
		DATA: R_SAKNR TYPE RANGE OF SAKNR.
		
		CASE IV_TYPE.
		
			WHEN 'C'.
			
				"비용계획 대상 계정 레인지 추출
				R_SAKNR = ZCL_COC_COMM=>GET_PLAN_CC( IV_KOKRS = IV_KOKRS ).
				
				CHECK R_SAKNR[] IS NOT INITIAL.
							
				SELECT A~SAKNR,
							 B~TXT20
				  FROM SKA1 AS A LEFT JOIN SKAT AS B
				            ON B~KTOPL = A~KTOPL
				           AND B~SPRAS = @SY-LANGU
				           AND B~SAKNR = A~SAKNR
				 WHERE A~KTOPL EQ @IV_KTOPL
				 	 AND A~SAKNR IN @R_SAKNR
				 ORDER BY A~SAKNR
				  INTO TABLE @DATA(LT_DATA).
		  
		ENDCASE.
		
    RV_SAKNR = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'SAKNR'
                                      IT_DATA    = LT_DATA ).		  
	  
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_COC_ONF4=>F4_BNAME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_BNAME                       TYPE        BNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD F4_BNAME.

    TYPES: BEGIN OF TY_BNAME,
             BNAME   TYPE USER_ADDR-BNAME,
             BNAME_T TYPE USER_ADDR-NAME_FIRST,
           END OF TY_BNAME.

    DATA: LT_DATA       TYPE TABLE OF TY_BNAME.

    SELECT BNAME,
           CONCAT( NAME_LAST, NAME_FIRST ) AS BNAME_T
      FROM USER_ADDR
     ORDER BY BNAME
      INTO TABLE @LT_DATA.

    RV_BNAME = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'BNAME'
                                      IT_DATA    = LT_DATA ).		

  ENDMETHOD.


  
  
  
  
  
  
  
  
	METHOD F4_KOSTL.
		
		CASE IV_TYPE.
		
			WHEN 'A'.
			
				"사용자의 코스트센터 권한
				SELECT DISTINCT 
				       B~KOKRS AS KOKRS,
				       B~KOSTL AS KOSTL,
							 C~LTEXT AS KOSTL_T
				  FROM ZCOCT011 AS A INNER JOIN CSKS AS B
				            ON B~KOKRS = A~KOKRS
				           AND ( ( A~KOSTLT = ' ' AND B~KOSTL = A~KOSTLF ) OR
				                 ( B~KOSTL >= A~KOSTLF AND B~KOSTL <= A~KOSTLT ) )
				               LEFT JOIN CSKT AS C
				            ON C~KOKRS = B~KOKRS
				           AND C~KOSTL = B~KOSTL
				           AND C~DATBI = B~DATBI
				           AND C~SPRAS = @SY-LANGU
				 WHERE A~KOKRS EQ @IV_KOKRS
				 	 AND A~BNAME EQ @IV_BNAME
				 ORDER BY B~KOSTL
				  INTO TABLE @DATA(LT_DATA).
		  
		ENDCASE.
		
    RV_KOSTL = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'KOSTL'
                                      IT_DATA    = LT_DATA ).		  
	  
  ENDMETHOD.
  









	METHOD CALL_F4.
	
    DATA: LT_RETURN_TAB TYPE TABLE OF DDSHRETVAL.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        RETFIELD        = I_RETFIELD
        DYNPPROG        = SY-REPID
        DYNPNR          = SY-DYNNR
        DYNPROFIELD     = I_DYNFIELD
        VALUE_ORG       = 'S'
      TABLES
        VALUE_TAB       = IT_DATA
        RETURN_TAB      = LT_RETURN_TAB
      EXCEPTIONS
        PARAMETER_ERROR = 1
        NO_VALUES_FOUND = 2
        OTHERS          = 3.

    IF SY-SUBRC = 0.
    	CHECK LT_RETURN_TAB IS NOT INITIAL.
      RV_SHVALUE = LT_RETURN[ 1 ]-FIELDVAL.
    ELSE.
    	MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
    	        WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.  	
    ENDIF.
  
  ENDMETHOD.
  
  
  
  
  
  
  
  
  METHOD F4_MATNR.

    DATA: BEGIN OF LS_DATA,
    	      MATNR TYPE MARA-MATNR,
    	      MAKTX TYPE MAKT-MAKTX,
          END OF LS_DATA.
    DATA: LT_DATA LIKE TABLE OF LS_DATA.

    SELECT A~MATNR,
    			 B~MAKTX
      FROM MARA AS A
      LEFT JOIN MAKT AS B ON B~MATNR = A~MATNR
      	                 AND B~SPRAS = @SY-LANGU
     WHERE A~MTART IN @IT_MTART
     ORDER BY A~MATNR
      INTO TABLE @LT_DATA.

    RV_MATNR = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'MATNR'
                                      IT_DATA    = LT_DATA ).		

  ENDMETHOD.









  METHOD F4_MATNR2.


















































  ENDMETHOD.

  
  
  
  
  
  
  
  METHOD F4_MATNR3.
























  ENDMETHOD.
  
  
  
  
  
  
  
  
  
  
  METHOD F4_VERSN.

		DATA: BEGIN OF LS_DATA,
						VERSN   TYPE VERSN,
						VERSN_T TYPE RTC_VERNM,
					END OF LS_DATA.
		DATA: LT_DATA LIKE TABLE OF LS_DATA.
		
		IF IV_ALL = 'X'.
			
			SELECT FIELD07 AS VERSN,
						 FIELD09 AS VERSN_T
			  FROM ZCOCT003
			 WHERE ZMODULE = 'CO'
			   AND CLASS   = @IV_CLASS "비용/투자계획 버전
			   AND FIELD-5 = @IV_KOKRS "관리회계 영역
			 ORDER BY FIELD05
			  INTO CORRESPONDING FIELDS OF TABLE @LT_DATA.
		  
		ELSE.
		
			SELECT FIELD07 AS VERSN,
						 FIELD09 AS VERSN_T
			  FROM ZCOCT003
			 WHERE ZMODULE = 'CO'
			   AND CLASS   = @IV_CLASS "비용/투자계획 버전
			   AND FIELD-5 = @IV_KOKRS "관리회계 영역
			   AND DELFLAG = @SPACE    "삭제 플래그를 활성여부로 사용
			 ORDER BY FIELD05
			  INTO CORRESPONDING FIELDS OF TABLE @LT_DATA.

		ENDIF.		
		  
    RV_VERSN = ZCL_COC_ONF4=>CALL_F4( I_RETFIELD = 'VERSN'
                                      IT_DATA    = LT_DATA ).		  

  ENDMETHOD.
  
  
  
  
  
  
  
  
	METHOD SET_VRM_LIST.
	
		CALL FUNCTION 'VRM_SET_VALUES'
			EXPORTING 
				ID     = IV_VRM_ID
				VALUES = IT_VRM_VALUES.
	  	
  ENDMETHOD.
ENDCLASS.